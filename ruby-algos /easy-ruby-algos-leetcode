# 1. Two Sum
# Easy
# Topics
# Companies
# Hint
# Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

# You may assume that each input would have exactly one solution, and you may not use the same element twice.

# You can return the answer in any order.

 

# Example 1:

# Input: nums = [2,7,11,15], target = 9
# Output: [0,1]
# Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
# Example 2:

# Input: nums = [3,2,4], target = 6
# Output: [1,2]
# Example 3:

# Input: nums = [3,3], target = 6
# Output: [0,1]
 

# Constraints:

# 2 <= nums.length <= 104
# -109 <= nums[i] <= 109
# -109 <= target <= 109
# Only one valid answer exists.

# solution 1

def two_sum(nums, target)
    answer = []
    nums.each_with_index do |num1, i1|
        nums.each_with_index do |num2, i2|
            if num1 + num2 == target && i1 != i2
                answer.push(i1, i2)
                return answer
            end
        end
    end
end

# solution 1 refactored 

def two_sum(nums, target)
  # Iterate over each element in the array with its index
  nums.each_with_index do |num1, i1|
    # Iterate again over each element with its index to compare pairs
    nums.each_with_index do |num2, i2|
      # Check if the sum of the two numbers equals the target and indices are different
      if num1 + num2 == target && i1 != i2
        # Return the indices as soon as the solution is found
        return [i1, i2]
      end
    end
  end

  # Return an empty array if no solution is found
  []
end

# solution 2

def two_sum(nums, target)
  # Create a hash to store the index of each number
  index_map = {}

  # Iterate over the nums array
  nums.each_with_index do |num, index|
    # Calculate the complement needed to reach the target
    complement = target - num
    
    # Check if the complement exists in the hash
    if index_map.key?(complement)
      # If found, return the indices
      return [index_map[complement], index]
    end
    
    # Store the current number and its index in the hash
    index_map[num] = index
  end

  # In case there's no solution, return nil or an empty array
  return []
end

# 9. Palindrome Number
# Easy
# Topics
# Companies
# Hint
# Given an integer x, return true if x is a 
# palindrome
# , and false otherwise.

 

# Example 1:

# Input: x = 121
# Output: true
# Explanation: 121 reads as 121 from left to right and from right to left.
# Example 2:

# Input: x = -121
# Output: false
# Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
# Example 3:

# Input: x = 10
# Output: false
# Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 

# Constraints:

# -231 <= x <= 231 - 1

# solution 1

def is_palindrome(x)
    x == x.to_s.reverse.to_i
end

# solution 2 no .reverse

def is_palindrome(x)
  # Negative numbers are not palindromes
  return false if x < 0

  original = x
  reversed = 0

  # Reverse the integer mathematically
  while x > 0
    reversed = reversed * 10 + x % 10
    x /= 10
  end

  # Compare the original number with the reversed number
  original == reversed
end

# 13. Roman to Integer
# Easy
# Topics
# Companies
# Hint
# Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

# Symbol       Value
# I             1
# V             5
# X             10
# L             50
# C             100
# D             500
# M             1000
# For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

# Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

# I can be placed before V (5) and X (10) to make 4 and 9. 
# X can be placed before L (50) and C (100) to make 40 and 90. 
# C can be placed before D (500) and M (1000) to make 400 and 900.
# Given a roman numeral, convert it to an integer.


# Example 1:

# Input: s = "III"
# Output: 3
# Explanation: III = 3.
# Example 2:

# Input: s = "LVIII"
# Output: 58
# Explanation: L = 50, V= 5, III = 3.
# Example 3:

# Input: s = "MCMXCIV"
# Output: 1994
# Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
 

# Constraints:

# 1 <= s.length <= 15
# s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
# It is guaranteed that s is a valid roman numeral in the range [1, 3999].
#  solution 1

def roman_to_int(s)
    roman_hash = {
        'I' => 1, 'V' => 5, 'X' => 10,
        'L' => 50, 'C' => 100, 'D' => 500,
        'M' => 1000
    }
    answer = 0
    previous = 0
    s.reverse.each_char do |i|
        if answer == 0
            answer = roman_hash[i]
            previous = roman_hash[i]
        elsif answer > 0 && roman_hash[i] >= previous
            answer += roman_hash[i]
            previous = roman_hash[i]
        elsif answer > 0 && roman_hash[i] < previous
            answer -= roman_hash[i]
            previous = roman_hash[i]
        end
    end
    return answer
end

# solution 1 refactored 

def roman_to_int(s)
    roman_hash = {
        'I' => 1, 'V' => 5, 'X' => 10,
        'L' => 50, 'C' => 100, 'D' => 500,
        'M' => 1000
    }
    total = 0
    prev_value = 0

    s.each_char do |char|
        curr_value = roman_hash[char]
        
        # If current value is greater than the previous one, adjust total
        if curr_value > prev_value
            total += (curr_value - 2 * prev_value)
        else
            total += curr_value
        end
        
        prev_value = curr_value
    end

    total
end


# 14. Longest Common Prefix
# Easy
# Topics
# Companies
# Write a function to find the longest common prefix string amongst an array of strings.

# If there is no common prefix, return an empty string "".

# Example 1:

# Input: strs = ["flower","flow","flight"]
# Output: "fl"
# Example 2:

# Input: strs = ["dog","racecar","car"]
# Output: ""
# Explanation: There is no common prefix among the input strings.

# Constraints:

# 1 <= strs.length <= 200
# 0 <= strs[i].length <= 200
# strs[i] consists of only lowercase English letters.

def longest_common_prefix(strs)
  prefix = ''
  index = 0
  test_chars = strs[0].split('')
  print test_chars
  strs.shift
  strs.each do |str|
    if str[index] == test_chars[index] && !prefix.include?(test_chars[index])
      prefix << test_chars[index]
      index += 1
    elsif str[index] == test_chars[index] && prefix.include?(test_chars[index])
      index += 1
    else
      break
    end
  end
  prefix
end

# 20. Valid Parentheses
# Easy
# Topics
# Companies
# Hint
# Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

# An input string is valid if:

# Open brackets must be closed by the same type of brackets.
# Open brackets must be closed in the correct order.
# Every close bracket has a corresponding open bracket of the same type.

# Example 1:

# Input: s = "()"
# Output: true
# Example 2:

# Input: s = "()[]{}"
# Output: true
# Example 3:

# Input: s = "(]"
# Output: false

# Constraints:

# 1 <= s.length <= 104
# s consists of parentheses only '()[]{}'.

# solution 1

def is_valid(s)
  # Define a hash to map closing brackets to their corresponding opening brackets
  bracket_pairs = {
    ')' => '(',
    '}' => '{',
    ']' => '['
  }

  # Initialize an empty stack
  stack = []

  # Iterate through each character in the string
  s.each_char do |char|
    if bracket_pairs.values.include?(char)  # Check if it's an opening bracket
      stack.push(char)
    elsif bracket_pairs.keys.include?(char) # Check if it's a closing bracket
      return false if stack.empty? || stack.pop != bracket_pairs[char]
    end
  end

  # If the stack is empty, all opening brackets have been matched and closed properly
  stack.empty?
end

# 21. Merge Two Sorted Lists
# Easy
# Topics
# Companies
# You are given the heads of two sorted linked lists list1 and list2.

# Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

# Return the head of the merged linked list.

 

# Example 1:


# Input: list1 = [1,2,4], list2 = [1,3,4]
# Output: [1,1,2,3,4,4]
# Example 2:

# Input: list1 = [], list2 = []
# Output: []
# Example 3:

# Input: list1 = [], list2 = [0]
# Output: [0]
 

# Constraints:

# The number of nodes in both lists is in the range [0, 50].
# -100 <= Node.val <= 100
# Both list1 and list2 are sorted in non-decreasing order.

# solution 1

def merge_two_lists(list1, list2)
    dummy = ListNode.new
    current = dummy

  # Loop until either list1 or list2 runs out
  while list1 && list2
    if list1.val <= list2.val
      current.next = list1
      list1 = list1.next
    else
      current.next = list2
      list2 = list2.next
    end
    current = current.next
  end

  # If one of the lists is not exhausted, append the rest of it
  current.next = list1 || list2

  # The merged list starts after the dummy node
  dummy.next
end

# 26. Remove Duplicates from Sorted Array
# Easy
# Topics
# Companies
# Hint
# Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

# Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

# Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
# Return k.
# Custom Judge:

# The judge will test your solution with the following code:

# int[] nums = [...]; // Input array
# int[] expectedNums = [...]; // The expected answer with correct length

# int k = removeDuplicates(nums); // Calls your implementation

# assert k == expectedNums.length;
# for (int i = 0; i < k; i++) {
#     assert nums[i] == expectedNums[i];
# }
# If all assertions pass, then your solution will be accepted.

# Example 1:

# Input: nums = [1,1,2]
# Output: 2, nums = [1,2,_]
# Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
# It does not matter what you leave beyond the returned k (hence they are underscores).
# Example 2:

# Input: nums = [0,0,1,1,1,2,2,3,3,4]
# Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
# Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
# It does not matter what you leave beyond the returned k (hence they are underscores).

# solution 1

def remove_duplicates(nums)
  index = 0
  num = ''
  inx_ary = []
  nums.each do |i|
    if i === num
      inx_ary.push(index)
    else
      num = i
    end
    index += 1
  end

  inx_ary.reverse.each do |inx|
    nums.delete_at(inx)
  end

  nums.length
end

# solution 2

def remove_duplicates(nums)
  return 0 if nums.empty?

  write_index = 1

  (1...nums.length).each do |read_index|
    if nums[read_index] != nums[read_index - 1]
      nums[write_index] = nums[read_index]
      write_index += 1
    end
  end

  write_index
end

# 27. Remove Element
# Easy
# Topics
# Companies
# Hint
# Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.

# Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:

# Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
# Return k.
# Custom Judge:

# The judge will test your solution with the following code:

# int[] nums = [...]; // Input array
# int val = ...; // Value to remove
# int[] expectedNums = [...]; // The expected answer with correct length.
#                             // It is sorted with no values equaling val.

# int k = removeElement(nums, val); // Calls your implementation

# assert k == expectedNums.length;
# sort(nums, 0, k); // Sort the first k elements of nums
# for (int i = 0; i < actualLength; i++) {
#     assert nums[i] == expectedNums[i];
# }
# If all assertions pass, then your solution will be accepted.

 

# Example 1:

# Input: nums = [3,2,2,3], val = 3
# Output: 2, nums = [2,2,_,_]
# Explanation: Your function should return k = 2, with the first two elements of nums being 2.
# It does not matter what you leave beyond the returned k (hence they are underscores).
# Example 2:

# Input: nums = [0,1,2,2,3,0,4,2], val = 2
# Output: 5, nums = [0,1,4,0,3,_,_,_]
# Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
# Note that the five elements can be returned in any order.
# It does not matter what you leave beyond the returned k (hence they are underscores).
 

# Constraints:

# 0 <= nums.length <= 100
# 0 <= nums[i] <= 50
# 0 <= val <= 100

# solution 1 (not good idea to change array while itterating, will changed indexes mid loop)

def remove_element(nums, val)
    nums.each_with_index do |num, i|
        if num == val
            nums.delete(nums[i])
        end
    end
    return nums.length
end

# solution 2

def remove_element(nums, val)
    k = 0
    nums.each do |num|
        if num != val
            nums[k] = num
            k += 1
        end
    end
    return k
end

# 28. Find the Index of the First Occurrence in a String
# Easy
# Topics
# Companies
# Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

 

# Example 1:

# Input: haystack = "sadbutsad", needle = "sad"
# Output: 0
# Explanation: "sad" occurs at index 0 and 6.
# The first occurrence is at index 0, so we return 0.
# Example 2:

# Input: haystack = "leetcode", needle = "leeto"
# Output: -1
# Explanation: "leeto" did not occur in "leetcode", so we return -1.
 

# Constraints:

# 1 <= haystack.length, needle.length <= 104
# haystack and needle consist of only lowercase English characters.

# solution 1

def str_str(haystack, needle)
    if haystack.include?(needle)
        return haystack.index(needle)
    else
        return -1
    end
end

# solution 2

def str_str(haystack, needle)
    haystack.index(needle) || -1
end

# solution 3

def str_str(haystack, needle)
    # Get the lengths of haystack and needle
    hay_len = haystack.length
    needle_len = needle.length

    # Loop through haystack to check for needle
    (0..(hay_len - needle_len)).each do |i|
        # If the substring from i to i + needle_len matches needle
        if haystack[i, needle_len] == needle
            return i
        end
    end

    # If no match is found, return -1
    return -1
end

# 35. Search Insert Position
# Easy
# Topics
# Companies
# Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

# You must write an algorithm with O(log n) runtime complexity.

# Example 1:

# Input: nums = [1,3,5,6], target = 5
# Output: 2
# Example 2:

# Input: nums = [1,3,5,6], target = 2
# Output: 1
# Example 3:

# Input: nums = [1,3,5,6], target = 7
# Output: 4

# Constraints:

# 1 <= nums.length <= 104
# -104 <= nums[i] <= 104
# nums contains distinct values sorted in ascending order.
# -104 <= target <= 104

# solution

def search_insert(nums, target)
  return nums.length if nums[nums.length - 1] < target

  nums.each do |i|
    return nums.index(i) if i >= target
  end
end

# 58. Length of Last Word
# Easy
# Topics
# Companies
# Given a string s consisting of words and spaces, return the length of the last word in the string.

# A word is a maximal
# substring
#  consisting of non-space characters only.

# Example 1:

# Input: s = "Hello World"
# Output: 5
# Explanation: The last word is "World" with length 5.
# Example 2:

# Input: s = "   fly me   to   the moon  "
# Output: 4
# Explanation: The last word is "moon" with length 4.
# Example 3:

# Input: s = "luffy is still joyboy"
# Output: 6
# Explanation: The last word is "joyboy" with length 6.

# Constraints:

# 1 <= s.length <= 104
# s consists of only English letters and spaces ' '.
# There will be at least one word in s.

# solution 1

def length_of_last_word(s)
  # s_array = s.split(' ')
  # last_word = s_array.pop()
  # lst_wrd_lngth = last_word.length
  # return lst_wrd_lngth
end

# solution 1 refactor

def length_of_last_word(s)
  s.split(' ').pop.length
end

# 66. Plus One
# Easy
# Topics
# Companies
# You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

# Increment the large integer by one and return the resulting array of digits.

 

# Example 1:

# Input: digits = [1,2,3]
# Output: [1,2,4]
# Explanation: The array represents the integer 123.
# Incrementing by one gives 123 + 1 = 124.
# Thus, the result should be [1,2,4].
# Example 2:

# Input: digits = [4,3,2,1]
# Output: [4,3,2,2]
# Explanation: The array represents the integer 4321.
# Incrementing by one gives 4321 + 1 = 4322.
# Thus, the result should be [4,3,2,2].
# Example 3:

# Input: digits = [9]
# Output: [1,0]
# Explanation: The array represents the integer 9.
# Incrementing by one gives 9 + 1 = 10.
# Thus, the result should be [1,0].
 

# Constraints:

# 1 <= digits.length <= 100
# 0 <= digits[i] <= 9
# digits does not contain any leading 0's.

# solution 1 pending

def plus_one(digits)
    dig_len = digits.length

    if digits[dig_len - 1] < 9
        digits[dig_len - 1] += 1
        reuturn digits
    end

    until digits[i] < 9
        digits[i] = 0
        return digits
    end
end

# solution 1 refactored and working

def plus_one(digits)
    # Start from the last index of the array
    i = digits.length - 1

    # Iterate backwards through the array
    while i >= 0
        if digits[i] < 9
            # If the current digit is less than 9, just increment it and return the array
            digits[i] += 1
            return digits
        end

        # If the current digit is 9, set it to 0
        digits[i] = 0
        i -= 1
    end

    # If all digits were 9, the loop will finish and we need to add a 1 at the start
    digits.unshift(1)
    return digits
end

# solution 2

def plus_one(digits)
    digits_ans = []
    dig_len = digits.length
    dig_to_i = digits.join('').to_i
    digits_plus = dig_to_i + 1

    digits_plus.to_s.chars do |dig|
        dig_i = dig.to_i
        digits_ans.push(dig_i)
    end

    return digits_ans
end

# solution 2 refactored

def plus_one(digits)
    # Convert the array of digits to an integer, add one, and split it back into an array
    digits_plus = (digits.join.to_i + 1).to_s.chars.map(&:to_i)

    return digits_plus
end

# 67. Add Binary
# Easy
# Topics
# Companies
# Given two binary strings a and b, return their sum as a binary string.

 

# Example 1:

# Input: a = "11", b = "1"
# Output: "100"
# Example 2:

# Input: a = "1010", b = "1011"
# Output: "10101"
 

# Constraints:

# 1 <= a.length, b.length <= 104
# a and b consist only of '0' or '1' characters.
# Each string does not contain leading zeros except for the zero itself.

# solution 1

def add_binary(a, b)
  (a.to_i(2) + b.to_i(2)).to_s(2)
end

# solution 2 

def add_binary(a, b)  
  result = []
    carry = 0

    max_length = [a.length, b.length].max
    a = a.rjust(max_length, '0')
    b = b.rjust(max_length, '0')

    (max_length - 1).downto(0) do |i|
      bit_a = a[i].to_i
      bit_b = b[i].to_i

      sum = bit_a + bit_b + carry
      carry = sum / 2
      result.unshift(sum % 2)
    end

    result.unshift(carry) if carry == 1
    result.join
end

# 69. Sqrt(x)
# Easy
# Topics
# Companies
# Hint
# Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

# You must not use any built-in exponent function or operator.

# For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.
 

# Example 1:

# Input: x = 4
# Output: 2
# Explanation: The square root of 4 is 2, so we return 2.
# Example 2:

# Input: x = 8
# Output: 2
# Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.
 

# Constraints:

# 0 <= x <= 231 - 1

# solution 1 (linear search)

def my_sqrt(x)
    return 0 if x == 0

  i = 1
  while i * i <= x
    i += 1
  end

  i - 1
end

# solution 2 (binary search)

def my_sqrt(x)
  return x if x < 2

  left = 1
  right = x
  result = 0

  while left <= right
    mid = left + (right - left) / 2

    if mid * mid == x
      return mid
    elsif mid * mid < x
      result = mid
      left = mid + 1
    else
      right = mid - 1
    end
  end

  result
end

# solution 3 (newton's method iterative aproximation)

def my_sqrt(x)
  return x if x < 2

  guess = x / 2.0

  while guess * guess > x
    guess = (guess + x / guess) / 2.0
  end

  guess.to_i
end

# 70. Climbing Stairs
# Easy
# Topics
# Companies
# Hint
# You are climbing a staircase. It takes n steps to reach the top.

# Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

# Example 1:

# Input: n = 2
# Output: 2
# Explanation: There are two ways to climb to the top.
# 1. 1 step + 1 step
# 2. 2 steps
# Example 2:

# Input: n = 3
# Output: 3
# Explanation: There are three ways to climb to the top.
# 1. 1 step + 1 step + 1 step
# 2. 1 step + 2 steps
# 3. 2 steps + 1 step

# Constraints:

1 <= n && n

# solution

def climb_stairs(n)
  return 1 if n == 1
  return 2 if n == 2

  # Initialize base cases
  ways = Array.new(n + 1)
  ways[1] = 1
  ways[2] = 2

  # Fill the array using the recurrence relation
  (3..n).each do |i|
    ways[i] = ways[i - 1] + ways[i - 2]
  end

  # The answer is in ways[n]
  ways[n]
end

# 83. Remove Duplicates from Sorted List
# Easy
# Topics
# Companies
# Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

# Example 1:


# Input: head = [1,1,2]
# Output: [1,2]
# Example 2:


# Input: head = [1,1,2,3,3]
# Output: [1,2,3]
 

# Constraints:

# The number of nodes in the list is in the range [0, 300].
# -100 <= Node.val <= 100
# The list is guaranteed to be sorted in ascending order.

# solution 1

# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val = 0, _next = nil)
#         @val = val
#         @next = _next
#     end
# end
# @param {ListNode} head
# @return {ListNode}
def delete_duplicates(head)
  return head if head.nil? # If the list is empty, return it as is.

    current = head

    while current && current.next
        if current.val == current.next.val
            # Skip the next node by pointing current.next to current.next.next
            current.next = current.next.next
        else
            # Move to the next node if no duplicates
            current = current.next
        end
    end

    return head
end

# 88. Merge Sorted Array
# Easy
# Topics
# Companies
# Hint
# You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

# Merge nums1 and nums2 into a single array sorted in non-decreasing order.

# The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

# Example 1:

# Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
# Output: [1,2,2,3,5,6]
# Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
# The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
# Example 2:

# Input: nums1 = [1], m = 1, nums2 = [], n = 0
# Output: [1]
# Explanation: The arrays we are merging are [1] and [].
# The result of the merge is [1].
# Example 3:

# Input: nums1 = [0], m = 0, nums2 = [1], n = 1
# Output: [1]
# Explanation: The arrays we are merging are [] and [1].
# The result of the merge is [1].
# Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

# Constraints:

# nums1.length == m + n
# nums2.length == n
# 0 <= m, n <= 200
# 1 <= m + n <= 200
# -109 <= nums1[i], nums2[j] <= 109

def merge(nums1, _m, nums2, _n)
  nums2.each { |i| nums1.push(i) }
  nums1.delete_if { |char| char == 0 }
  nums1.sort!
end

# 94. Binary Tree Inorder Traversal
# Easy
# Topics
# Companies
# Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

# Example 1:


# Input: root = [1,null,2,3]
# Output: [1,3,2]
# Example 2:

# Input: root = []
# Output: []
# Example 3:

# Input: root = [1]
# Output: [1]
 

# Constraints:

# The number of nodes in the tree is in the range [0, 100].
# -100 <= Node.val <= 100

# solution 1 recursive 

def inorder_traversal(root)
  inorder_list = []
  traverse(root, inorder_list)
  inorder_list
end

def traverse(node, inorder_list)
  return if node.nil?

  traverse(node.left, inorder_list)    # Traverse the left subtree
  inorder_list << node.val             # Visit the current node
  traverse(node.right, inorder_list)   # Traverse the right subtree
end

# solution 2 iterative 

def inorder_traversal(root)
  inorder_list = []
  stack = []
  current = root

  while current || !stack.empty?
    while current
      stack.push(current)   # Push the current node to the stack
      current = current.left  # Move to the left child
    end

    current = stack.pop  # Pop the node from the stack
    inorder_list << current.val  # Visit the node
    current = current.right  # Move to the right child
  end

  inorder_list
end

# solution 3 Morris traversal

def inorder_traversal(root)
  inorder_list = []
  current = root

  while current
    if current.left.nil?
      inorder_list << current.val
      current = current.right
    else
      predecessor = current.left
      while predecessor.right && predecessor.right != current
        predecessor = predecessor.right
      end

      if predecessor.right.nil?
        predecessor.right = current
        current = current.left
      else
        predecessor.right = nil
        inorder_list << current.val
        current = current.right
      end
    end
  end

  inorder_list
end

# 100. Same Tree
# Easy
# Topics
# Companies
# Given the roots of two binary trees p and q, write a function to check if they are the same or not.

# Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

 

# Example 1:


# Input: p = [1,2,3], q = [1,2,3]
# Output: true
# Example 2:


# Input: p = [1,2], q = [1,null,2]
# Output: false
# Example 3:


# Input: p = [1,2,1], q = [1,1,2]
# Output: false
 

# Constraints:

# The number of nodes in both trees is in the range [0, 100].
# -104 <= Node.val <= 104

# solution 1 (has some issues, inorder lists can have different shapes)

def is_same_tree(p, q)
  inorder_list_p = []
  inorder_list_q = []
  traverse(p, inorder_list_p)
  traverse(q, inorder_list_q)
  inorder_list_p == inorder_list_q
end

def traverse(node, inorder_list)
  return if node.nil?

  traverse(node.left, inorder_list)    # Traverse the left subtree
  inorder_list << node.val             # Visit the current node
  traverse(node.right, inorder_list)   # Traverse the right subtree
end

# solution 2 (recursice without finding inorder lists)

def is_same_tree(p, q)
  # If both nodes are nil, they are the same
  return true if p.nil? && q.nil?

  # If one is nil and the other is not, they are not the same
  return false if p.nil? || q.nil?

  # If the values of the nodes differ, they are not the same
  return false if p.val != q.val

  # Recursively check the left and right subtrees
  is_same_tree(p.left, q.left) && is_same_tree(p.right, q.right)
end

# solution 3 iterative

def is_same_tree(p, q)
  stack_p = []
  stack_q = []
  
  while !stack_p.empty? || p || !stack_q.empty? || q
    while p
      stack_p.push(p)
      p = p.left
    end
    
    while q
      stack_q.push(q)
      q = q.left
    end
    
    # Pop the last nodes from the stacks
    p = stack_p.pop
    q = stack_q.pop
    
    # If one is nil and the other isn't, trees aren't the same
    return false if p.nil? != q.nil?
    
    # If the node values differ, trees aren't the same
    return false if p.val != q.val
    
    # Move to the right child
    p = p.right
    q = q.right
  end
  
  # If both stacks are empty, trees are the same
  return stack_p.empty? && stack_q.empty?
end

# 101. Symmetric Tree
# Easy
# Topics
# Companies
# Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

# Example 1:


# Input: root = [1,2,2,3,4,4,3]
# Output: true
# Example 2:


# Input: root = [1,2,2,null,3,null,3]
# Output: false
 

# Constraints:

# The number of nodes in the tree is in the range [1, 1000].
# -100 <= Node.val <= 100

# solution 1 (recursive)

def is_symmetric(root)
  return true if root.nil?
  is_mirror(root.left, root.right)
end

def is_mirror(left, right)
  # If both subtrees are empty, they are mirrors of each other
  return true if left.nil? && right.nil?

  # If only one of the subtrees is empty, they are not mirrors
  return false if left.nil? || right.nil?

  # The current nodes must have the same value and their subtrees must be mirrors
  left.val == right.val &&
  is_mirror(left.left, right.right) &&
  is_mirror(left.right, right.left)
end

# solution 2 (iterative)

def is_symmetric(root)
  return true if root.nil?

  # Initialize a queue to hold pairs of nodes to be compared
  queue = []
  queue.push([root.left, root.right])

  while !queue.empty?
    left, right = queue.shift

    # If both nodes are nil, continue to the next pair
    next if left.nil? && right.nil?

    # If one of the nodes is nil or their values don't match, the tree is not symmetric
    return false if left.nil? || right.nil? || left.val != right.val

    # Add the children of the nodes to the queue in opposite order
    queue.push([left.left, right.right])
    queue.push([left.right, right.left])
  end

  # If all nodes have been successfully compared, the tree is symmetric
  return true
end

# 104. Maximum Depth of Binary Tree
# Easy
# Topics
# Companies
# Given the root of a binary tree, return its maximum depth.

# A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 

# Example 1:


# Input: root = [3,9,20,null,null,15,7]
# Output: 3
# Example 2:

# Input: root = [1,null,2]
# Output: 2
 

# Constraints:

# The number of nodes in the tree is in the range [0, 104].
# -100 <= Node.val <= 100

# solution 1 recursive

def max_depth(root)
  return 0 if root.nil?  # If the tree is empty, the depth is 0

  # Recursively find the depth of the left and right subtrees
  left_depth = max_depth(root.left)
  right_depth = max_depth(root.right)

  # The depth of the tree rooted at this node is the greater of the two depths plus one
  return [left_depth, right_depth].max + 1
end

# solution 2 iterative breadth first

def max_depth(root)
  return 0 if root.nil?  # If the tree is empty, the depth is 0

  queue = [root]  # Initialize the queue with the root
  depth = 0

  while !queue.empty?
    depth += 1  # Increment depth at each level
    level_size = queue.size  # Number of nodes at the current level

    # Process all nodes at the current level
    level_size.times do
      node = queue.shift  # Dequeue the front node
      # Enqueue the children of the current node
      queue.push(node.left) if node.left
      queue.push(node.right) if node.right
    end
  end

  return depth
end

# solution 3 iterative depth first

def max_depth(root)
  return 0 if root.nil?  # If the tree is empty, the depth is 0

  stack = [[root, 1]]  # Stack holds pairs of (node, current_depth)
  max_depth = 0

  until stack.empty?
    node, current_depth = stack.pop  # Pop the top node and its depth
    max_depth = [max_depth, current_depth].max  # Update the max depth

    # Push the children onto the stack with their corresponding depths
    stack.push([node.left, current_depth + 1]) if node.left
    stack.push([node.right, current_depth + 1]) if node.right
  end

  return max_depth
end

# 108. Convert Sorted Array to Binary Search Tree
# Easy
# Topics
# Companies
# Given an integer array nums where the elements are sorted in ascending order, convert it to a 
# height-balanced
#  binary search tree.

 

# Example 1:


# Input: nums = [-10,-3,0,5,9]
# Output: [0,-3,9,-10,null,5]
# Explanation: [0,-10,5,null,-3,null,9] is also accepted:

# Example 2:


# Input: nums = [1,3]
# Output: [3,1]
# Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.
 

# Constraints:

# 1 <= nums.length <= 104
# -104 <= nums[i] <= 104
# nums is sorted in a strictly increasing order.

# soltuion 1

def sorted_array_to_bst(nums)
  return nil if nums.empty?  # Base case: if the array is empty, return nil

  mid = nums.length / 2  # Find the middle index of the array

  # Create a new node with the middle element as the root
  root = TreeNode.new(nums[mid])

  # Recursively build the left and right subtrees
  root.left = sorted_array_to_bst(nums[0...mid])  # Left half of the array
  root.right = sorted_array_to_bst(nums[mid+1..-1])  # Right half of the array

  return root  # Return the root of the BST
end

# 110. Balanced Binary Tree
# Easy
# Topics
# Companies
# Given a binary tree, determine if it is 
# height-balanced
# .

 

# Example 1:


# Input: root = [3,9,20,null,null,15,7]
# Output: true
# Example 2:


# Input: root = [1,2,2,3,3,null,null,4,4]
# Output: false
# Example 3:

# Input: root = []
# Output: true
 

# Constraints:

# The number of nodes in the tree is in the range [0, 5000].
# -104 <= Node.val <= 104

# solution 1

# Definition for a binary tree node.
class TreeNode
  attr_accessor :val, :left, :right
  def initialize(val = 0, left = nil, right = nil)
    @val = val
    @left = left
    @right = right
  end
end

# @param {TreeNode} root
# @return {Boolean}
def is_balanced(root)
  # Helper function to check balance and calculate height
  def check_balance_and_height(node)
    return [true, 0] if node.nil?  # An empty node is balanced with height 0

    # Recursively check the left and right subtrees
    left_balanced, left_height = check_balance_and_height(node.left)
    right_balanced, right_height = check_balance_and_height(node.right)

    # A tree is balanced if:
    # 1. The left subtree is balanced
    # 2. The right subtree is balanced
    # 3. The difference in heights between the left and right subtrees is at most 1
    balanced = left_balanced && right_balanced && (left_height - right_height).abs <= 1

    # The height of the current node is 1 plus the maximum height of its subtrees
    height = 1 + [left_height, right_height].max

    return [balanced, height]
  end

  # Start the recursive check from the root
  balanced, _ = check_balance_and_height(root)
  return balanced
end

# 111. Minimum Depth of Binary Tree
# Easy
# Topics
# Companies
# Given a binary tree, find its minimum depth.

# The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

# Note: A leaf is a node with no children.

 

# Example 1:


# Input: root = [3,9,20,null,null,15,7]
# Output: 2
# Example 2:

# Input: root = [2,null,3,null,4,null,5,null,6]
# Output: 5
 

# Constraints:

# The number of nodes in the tree is in the range [0, 105].
# -1000 <= Node.val <= 1000

# solution 1

def min_depth(root)
  return 0 if root.nil?
  
  # If left child is nil, find the depth of the right subtree
  if root.left.nil?
    return 1 + min_depth(root.right)
  end
  
  # If right child is nil, find the depth of the left subtree
  if root.right.nil?
    return 1 + min_depth(root.left)
  end
  
  # If both children exist, find the minimum depth between the two subtrees
  return 1 + [min_depth(root.left), min_depth(root.right)].min
end

# 112. Path Sum
# Easy
# Topics
# Companies
# Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.

# A leaf is a node with no children.

 

# Example 1:


# Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
# Output: true
# Explanation: The root-to-leaf path with the target sum is shown.
# Example 2:


# Input: root = [1,2,3], targetSum = 5
# Output: false
# Explanation: There two root-to-leaf paths in the tree:
# (1 --> 2): The sum is 3.
# (1 --> 3): The sum is 4.
# There is no root-to-leaf path with sum = 5.
# Example 3:

# Input: root = [], targetSum = 0
# Output: false
# Explanation: Since the tree is empty, there are no root-to-leaf paths.
 

# Constraints:

# The number of nodes in the tree is in the range [0, 5000].
# -1000 <= Node.val <= 1000
# -1000 <= targetSum <= 1000

# solution 1

def has_path_sum(root, target_sum)
  return false if root.nil?

  # If it's a leaf node, check if the remaining target_sum equals the leaf node's value
  if root.left.nil? && root.right.nil?
    return target_sum == root.val
  end

  # Recursively check the left and right subtree with the updated target_sum
  remaining_sum = target_sum - root.val
  return has_path_sum(root.left, remaining_sum) || has_path_sum(root.right, remaining_sum)
end

# 118. Pascal's Triangle
# Easy
# Topics
# Companies
# Given an integer numRows, return the first numRows of Pascal's triangle.

# In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

# Example 1:

# Input: numRows = 5
# Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
# Example 2:

# Input: numRows = 1
# Output: [[1]]
 

# Constraints:

# 1 <= numRows <= 30

# solution 1

def generate(num_rows)
    return [] if num_rows == 0 
    return [[1]] if num_rows == 1 
    return [[1],[1,1]] if num_rows == 2 
    answer = [[1],[1,1]]
    if num_rows > 2
        prev_row = answer[answer.length - 1]
        (num_rows - 2).times do |i|
            current_row = [1]
            prev_row.each_cons(2) do |a, b|
                current_row.push(a + b)
            end
            current_row.push(1)
            answer.push(current_row)
            prev_row = current_row
        end
        return answer
    end
end

# solution 1 refactored 

def generate(num_rows)
  return [] if num_rows == 0
  answer = [[1]]
  
  (num_rows - 1).times do
    prev_row = answer.last
    current_row = [1]
    
    (0...prev_row.length - 1).each do |i|
      current_row << prev_row[i] + prev_row[i + 1]
    end
    
    current_row << 1
    answer << current_row
  end
  
  answer
end

# solution 2

def generate(num_rows)
  answer = []
  
  num_rows.times do |i|
    row = Array.new(i + 1, 1)
    
    (1...i).each do |j|
      row[j] = answer[i - 1][j - 1] + answer[i - 1][j]
    end
    
    answer << row
  end
  
  answer
end

# 119. Pascal's Triangle II
# Easy
# Topics
# Companies
# Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

# In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

# Example 1:

# Input: rowIndex = 3
# Output: [1,3,3,1]
# Example 2:

# Input: rowIndex = 0
# Output: [1]
# Example 3:

# Input: rowIndex = 1
# Output: [1,1]
 

# Constraints:

# 0 <= rowIndex <= 33

# solution 1

def get_row(row_index)
  answer = [[1]]
  
  row_index.times do
    prev_row = answer.last
    current_row = [1]
    
    (0...prev_row.length - 1).each do |i|
      current_row << prev_row[i] + prev_row[i + 1]
    end
    
    current_row << 1
    answer << current_row
  end

  answer.last
end

# solution 2

def get_row(row_index)
  row = [1] * (row_index + 1)
  
  (1...row_index).each do |i|
    (i).downto(1) do |j|
      row[j] += row[j - 1]
    end
  end
  
  row
end

# 121. Best Time to Buy and Sell Stock
# Easy
# Topics
# Companies
# You are given an array prices where prices[i] is the price of a given stock on the ith day.

# You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

# Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

# Example 1:

# Input: prices = [7,1,5,3,6,4]
# Output: 5
# Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
# Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
# Example 2:

# Input: prices = [7,6,4,3,1]
# Output: 0
# Explanation: In this case, no transactions are done and the max profit = 0.
 

# Constraints:

# 1 <= prices.length <= 105
# 0 <= prices[i] <= 104

# solution 1

def max_profit(prices)
    max_profit = 0
    prices.each_with_index do |buy, i|
        (i + 1..prices.length - 1).each do |j|
            if prices[j] - buy > max_profit
                max_profit = prices[j] - buy
            end
        end
    end
    return max_profit
end

# solution 1 refactored 

def max_profit(prices)
  max_profit = 0

  prices.each_with_index do |buy, i|
    ((i + 1)...prices.length).each do |j|
      profit = prices[j] - buy
      max_profit = profit if profit > max_profit
    end
  end

  max_profit
end

# solution 2

def max_profit(prices)
  min_price = Float::INFINITY
  max_profit = 0

  prices.each do |price|
    # Update min_price to the lowest price encountered so far
    min_price = [min_price, price].min

    # Calculate the potential profit
    profit = price - min_price

    # Update max_profit to the highest profit found so far
    max_profit = [max_profit, profit].max
  end

  max_profit
end

# 125. Valid Palindrome
# Easy
# Topics
# Companies
# A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

# Given a string s, return true if it is a palindrome, or false otherwise.

 

# Example 1:

# Input: s = "A man, a plan, a canal: Panama"
# Output: true
# Explanation: "amanaplanacanalpanama" is a palindrome.
# Example 2:

# Input: s = "race a car"
# Output: false
# Explanation: "raceacar" is not a palindrome.
# Example 3:

# Input: s = " "
# Output: true
# Explanation: s is an empty string "" after removing non-alphanumeric characters.
# Since an empty string reads the same forward and backward, it is a palindrome.
 

# Constraints:

# 1 <= s.length <= 2 * 105
# s consists only of printable ASCII characters.

# solution 1

def is_palindrome(s)
    s_dwn = s.downcase
    s_dwn.each_char do |char|
        if !("a"..."z").include?(char) && !(0...9).include?(char)
            puts char
            puts ("a"..."z").include?(char)
            puts (9...0).include?(char)

            s_dwn.delete!(char)
            puts s_dwn
        end
    end
        puts s_dwn
        puts s_dwn.reverse
        s_dwn == s_dwn.reverse
end

# solution 2

def is_palindrome(s)
  # Remove non-alphanumeric characters and convert to lowercase
  s = s.downcase.gsub(/[^a-z0-9]/, '')
  # Check if the string is the same forwards and backwards
  s == s.reverse
end

# solution 3

def is_palindrome(s)
  left, right = 0, s.length - 1

  while left < right
    # Increment left pointer if current character is not alphanumeric
    left += 1 while left < right && !s[left].match?(/[a-zA-Z0-9]/)
    # Decrement right pointer if current character is not alphanumeric
    right -= 1 while left < right && !s[right].match?(/[a-zA-Z0-9]/)

    # Compare the characters after converting to lowercase
    return false if s[left].downcase != s[right].downcase

    # Move pointers closer
    left += 1
    right -= 1
  end

  true
end

# 136. Single Number
# Easy
# Topics
# Companies
# Hint
# Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

# You must implement a solution with a linear runtime complexity and use only constant extra space.

 

# Example 1:

# Input: nums = [2,2,1]
# Output: 1
# Example 2:

# Input: nums = [4,1,2,1,2]
# Output: 4
# Example 3:

# Input: nums = [1]
# Output: 1
 

# Constraints:

# 1 <= nums.length <= 3 * 104
# -3 * 104 <= nums[i] <= 3 * 104
# Each element in the array appears twice except for one element which appears only once.

# solution 1

def single_number(nums)
    xor_result = nums[0]
    (1...nums.length).each do |i|
        xor_result ^= nums[i]
    end
    xor_result
end

# solution 2

def single_number(nums)
    unique_sum = nums.uniq.sum
    total_sum = nums.sum
    single_number = 2 * unique_sum - total_sum
    single_number
end

# 141. Linked List Cycle
# Easy
# Topics
# Companies
# Given head, the head of a linked list, determine if the linked list has a cycle in it.

# There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

# Return true if there is a cycle in the linked list. Otherwise, return false.

 

# Example 1:


# Input: head = [3,2,0,-4], pos = 1
# Output: true
# Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
# Example 2:


# Input: head = [1,2], pos = 0
# Output: true
# Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
# Example 3:


# Input: head = [1], pos = -1
# Output: false
# Explanation: There is no cycle in the linked list.
 

# Constraints:

# The number of the nodes in the list is in the range [0, 104].
# -105 <= Node.val <= 105
# pos is -1 or a valid index in the linked-list.

# solution 1

# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end

# @param {ListNode} head
# @return {Boolean}
def hasCycle(head)
    arr = []
    list = head
    while list != nil
        return true if arr.include?(list)
        arr.push(list)
        list = list.next
    end
    return false
end

# soltuion 2 Floyd's cycle/ toroise and hare

def hasCycle(head)
    slow = head
    fast = head
    
    while fast != nil && fast.next != nil
        slow = slow.next
        fast = fast.next.next
        
        if slow == fast
            return true
        end
    end
    
    return false
end

# 144. Binary Tree Preorder Traversal
# Easy
# Topics
# Companies
# Given the root of a binary tree, return the preorder traversal of its nodes' values.

 

# Example 1:

# Input: root = [1,null,2,3]

# Output: [1,2,3]

# Explanation:



# Example 2:

# Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]

# Output: [1,2,4,5,6,7,3,8,9]

# Explanation:



# Example 3:

# Input: root = []

# Output: []

# Example 4:

# Input: root = [1]

# Output: [1]

 

# Constraints:

# The number of nodes in the tree is in the range [0, 100].
# -100 <= Node.val <= 100

# solution 1 recursive

def preorder_traversal(root)
    answer = []
    move(root, answer)
    answer
end
    
def move(current, answer)
    return if current.nil?

    answer << current.val
    move(current.left, answer)
    move(current.right, answer)
end

# solution 2 iterative 

def preorder_traversal(root)
    return [] if root.nil?

    answer = []
    stack = [root]

    until stack.empty?
        node = stack.pop
        answer << node.val
        stack.push(node.right) if node.right
        stack.push(node.left) if node.left
    end

    answer
end

# 145. Binary Tree Postorder Traversal
# Easy
# Topics
# Companies
# Given the root of a binary tree, return the postorder traversal of its nodes' values.

 

# Example 1:

# Input: root = [1,null,2,3]

# Output: [3,2,1]

# Explanation:



# Example 2:

# Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]

# Output: [4,6,7,5,2,9,8,3,1]

# Explanation:



# Example 3:

# Input: root = []

# Output: []

# Example 4:

# Input: root = [1]

# Output: [1]

 

# Constraints:

# The number of the nodes in the tree is in the range [0, 100].
# -100 <= Node.val <= 100

# soltuion 1 recursive

def postorder_traversal(root)
    answer = []
    move(root, answer)
    answer
end

def move(current, answer)
    return if current.nil?

    move(current.left, answer)
    move(current.right, answer)
    answer << current.val
end

# solution 2 iterative two stack

def postorder_traversal(root)
  return [] if root.nil?

  stack1 = []
  stack2 = []
  stack1.push(root)

  while !stack1.empty?
    node = stack1.pop
    stack2.push(node)

    # Push left and right children to stack1
    stack1.push(node.left) if node.left
    stack1.push(node.right) if node.right
  end

  # The nodes in stack2 are in reverse postorder
  result = []
  while !stack2.empty?
    result.push(stack2.pop.val)
  end

  result
end

# solutino 3 iterative one stack

def postorder_traversal(root)
  return [] if root.nil?

  stack = []
  result = []
  current = root
  last_visited = nil

  while !stack.empty? || current
    if current
      stack.push(current)
      current = current.left
    else
      peek_node = stack.last
      if peek_node.right && last_visited != peek_node.right
        current = peek_node.right
      else
        result.push(peek_node.val)
        last_visited = stack.pop
      end
    end
  end

  result
end

# 160. Intersection of Two Linked Lists
# Easy
# Topics
# Companies
# Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

# For example, the following two linked lists begin to intersect at node c1:


# The test cases are generated such that there are no cycles anywhere in the entire linked structure.

# Note that the linked lists must retain their original structure after the function returns.

# Custom Judge:

# The inputs to the judge are given as follows (your program is not given these inputs):

# intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.
# listA - The first linked list.
# listB - The second linked list.
# skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.
# skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.
# The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.

 

# Example 1:


# Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
# Output: Intersected at '8'
# Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
# From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
# - Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.
# Example 2:


# Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
# Output: Intersected at '2'
# Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).
# From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
# Example 3:


# Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
# Output: No intersection
# Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
# Explanation: The two lists do not intersect, so return null.
 

# Constraints:

# The number of nodes of listA is in the m.
# The number of nodes of listB is in the n.
# 1 <= m, n <= 3 * 104
# 1 <= Node.val <= 105
# 0 <= skipA < m
# 0 <= skipB < n
# intersectVal is 0 if listA and listB do not intersect.
# intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.

# solution 1

# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val)
#         @val = val
#         @next = nil
#     end
# end

# @param {ListNode} headA
# @param {ListNode} headB
# @return {ListNode}
def getIntersectionNode(headA, headB)
    ptrA = headA
    ptrB = headB

    while ptrA != ptrB
        ptrA = ptrA.nil? ? headB : ptrA.next
        ptrB = ptrB.nil? ? headA : ptrB.next
    end

    ptrA
end

# 168. Excel Sheet Column Title
# Easy
# Topics
# Companies
# Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.

# For example:

# A -> 1
# B -> 2
# C -> 3
# ...
# Z -> 26
# AA -> 27
# AB -> 28 
# ...
 

# Example 1:

# Input: columnNumber = 1
# Output: "A"
# Example 2:

# Input: columnNumber = 28
# Output: "AB"
# Example 3:

# Input: columnNumber = 701
# Output: "ZY"
 

# Constraints:

# 1 <= columnNumber <= 231 - 1

# solution 1 using hash map (has issues)

def convert_to_title(column_number)
    alpha_map = Hash.new
    alpha = ("A".."Z")
    counter = 1
    alpha.each do |letter|
        alpha_map[counter] = letter
        counter += 1
    end

    if column_number < 27 
        return alpha_map[column_number]
    else
        left_over = column_number % 26
        base = column_number - left_over
        first_letter = base / 26
        return "#{alpha_map[first_letter]}" + "#{alpha_map[left_over]}"
    end

end

# solution 2 using ASCII

def convert_to_title(column_number)
   title = ""

  while column_number > 0
    column_number -= 1
    remainder = column_number % 26
    title = (65 + remainder).chr + title
    column_number /= 26
  end

  title
end

# 169. Majority Element
# Easy
# Topics
# Companies
# Given an array nums of size n, return the majority element.

# The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

# Example 1:

# Input: nums = [3,2,3]
# Output: 3
# Example 2:

# Input: nums = [2,2,1,1,1,2,2]
# Output: 2
 

# Constraints:

# n == nums.length
# 1 <= n <= 5 * 104
# -109 <= nums[i] <= 109

# solution 1

def majority_element(nums)
    counter = Hash.new
    length = nums.length
    nums.each do |num|
        if counter[num].nil?
            counter[num] = 1
        else
            counter[num] += 1
        end
    end
    return counter.max_by{|k,v| v}[0]
end

# solution 2 Boyer Moore Voting Algorithm

def majority_element(nums)
    candidate = nil
    count = 0

    nums.each do |num|
        if count == 0
            candidate = num
        end
        count += (num == candidate) ? 1 : -1
    end

    candidate
end

# 171. Excel Sheet Column Number
# Easy
# Topics
# Companies
# Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.

# For example:

# A -> 1
# B -> 2
# C -> 3
# ...
# Z -> 26
# AA -> 27
# AB -> 28 
# ...
 

# Example 1:

# Input: columnTitle = "A"
# Output: 1
# Example 2:

# Input: columnTitle = "AB"
# Output: 28
# Example 3:

# Input: columnTitle = "ZY"
# Output: 701
 

# Constraints:

# 1 <= columnTitle.length <= 7
# columnTitle consists only of uppercase English letters.
# columnTitle is in the range ["A", "FXSHRXW"].

# solution 1

def title_to_number(column_title)
    answer = 0
    index = 1
    column_title.each_char do |char|
        if index != column_title.length
            answer += (char.ord - 64) * 26
            index += 1
        else
            answer += char.ord - 64
        end
    end
    answer
end

# solution 1 refactored

def title_to_number(column_title)
    answer = 0
    column_title.each_char do |char|
        answer = answer * 26 + (char.ord - 64)
    end
    answer
end

# 190. Reverse Bits
# Easy
# Topics
# Companies
# Reverse bits of a given 32 bits unsigned integer.

# Note:

# Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
# In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
 

# Example 1:

# Input: n = 00000010100101000001111010011100
# Output:    964176192 (00111001011110000010100101000000)
# Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
# Example 2:

# Input: n = 11111111111111111111111111111101
# Output:   3221225471 (10111111111111111111111111111111)
# Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.
 

# Constraints:

# The input must be a binary string of length 32

# solution 1

def reverse_bits(n)
  # Convert the number to a 32-bit binary string, padded with leading zeros
  binary_str = n.to_s(2).rjust(32, '0')
  
  # Reverse the binary string
  reversed_str = binary_str.reverse
  
  # Convert the reversed binary string back to an integer
  reversed_int = reversed_str.to_i(2)
  
  return reversed_int
end

# 191. Number of 1 Bits
# Attempted
# Easy
# Topics
# Companies
# Write a function that takes the binary representation of a positive integer and returns the number of 
# set bits
#  it has (also known as the Hamming weight).

 

# Example 1:

# Input: n = 11

# Output: 3

# Explanation:

# The input binary string 1011 has a total of three set bits.

# Example 2:

# Input: n = 128

# Output: 1

# Explanation:

# The input binary string 10000000 has a total of one set bit.

# Example 3:

# Input: n = 2147483645

# Output: 30

# Explanation:

# The input binary string 1111111111111111111111111111101 has a total of thirty set bits.

 

# Constraints:

# 1 <= n <= 231 - 1

# solution 1

def hamming_weight(n)
    number = n.to_s(2)
    counter = 0
    number.each_char do |i|
    puts i
        if i == "1"
            counter += 1
        end
    end
    return counter
end

# soltuion 2

def hamming_weight(n)
  n.to_s(2).count('1')
end

# 193. Valid Phone Numbers
# Solved
# Easy
# Topics
# Companies
# Given a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.

# You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)

# You may also assume each line in the text file must not contain leading or trailing white spaces.

# Example:

# Assume that file.txt has the following content:

# 987-123-4567
# 123 456 7890
# (123) 456-7890
# Your script should output the following valid phone numbers:

# 987-123-4567
# (123) 456-7890

# solution 1

grep -E '^(\([0-9]{3}\) [0-9]{3}-[0-9]{4}|[0-9]{3}-[0-9]{3}-[0-9]{4})$' file.txt

# 195. Tenth Line
# Easy
# Topics
# Companies
# Given a text file file.txt, print just the 10th line of the file.

# Example:

# Assume that file.txt has the following content:

# Line 1
# Line 2
# Line 3
# Line 4
# Line 5
# Line 6
# Line 7
# Line 8
# Line 9
# Line 10
# Your script should output the tenth line, which is:

# Line 10

# solution 1

sed -n '10p' file.txt

# solution 2

head -n 10 file.txt | tail -n 1

# solution 3

awk 'NR==10' file.txt

# 196. Delete Duplicate Emails
# Easy
# Topics
# Companies
# SQL Schema
# Pandas Schema
# Table: Person

# +-------------+---------+
# | Column Name | Type    |
# +-------------+---------+
# | id          | int     |
# | email       | varchar |
# +-------------+---------+
# id is the primary key (column with unique values) for this table.
# Each row of this table contains an email. The emails will not contain uppercase letters.
 

# Write a solution to delete all duplicate emails, keeping only one unique email with the smallest id.

# For SQL users, please note that you are supposed to write a DELETE statement and not a SELECT one.

# For Pandas users, please note that you are supposed to modify Person in place.

# After running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.

# The result format is in the following example.

 

# Example 1:

# Input: 
# Person table:
# +----+------------------+
# | id | email            |
# +----+------------------+
# | 1  | john@example.com |
# | 2  | bob@example.com  |
# | 3  | john@example.com |
# +----+------------------+
# Output: 
# +----+------------------+
# | id | email            |
# +----+------------------+
# | 1  | john@example.com |
# | 2  | bob@example.com  |
# +----+------------------+
# Explanation: john@example.com is repeated two times. We keep the row with the smallest Id = 1.

# solution 1 POSTGRESQL

DELETE FROM Person
WHERE id NOT IN (
    SELECT MIN(id)
    FROM Person
    GROUP BY email
);

# 197. Rising Temperature
# Easy
# Topics
# Companies
# SQL Schema
# Pandas Schema
# Table: Weather

# +---------------+---------+
# | Column Name   | Type    |
# +---------------+---------+
# | id            | int     |
# | recordDate    | date    |
# | temperature   | int     |
# +---------------+---------+
# id is the column with unique values for this table.
# There are no different rows with the same recordDate.
# This table contains information about the temperature on a certain day.
 

# Write a solution to find all dates' id with higher temperatures compared to its previous dates (yesterday).

# Return the result table in any order.

# The result format is in the following example.

 

# Example 1:

# Input: 
# Weather table:
# +----+------------+-------------+
# | id | recordDate | temperature |
# +----+------------+-------------+
# | 1  | 2015-01-01 | 10          |
# | 2  | 2015-01-02 | 25          |
# | 3  | 2015-01-03 | 20          |
# | 4  | 2015-01-04 | 30          |
# +----+------------+-------------+
# Output: 
# +----+
# | id |
# +----+
# | 2  |
# | 4  |
# +----+
# Explanation: 
# In 2015-01-02, the temperature was higher than the previous day (10 -> 25).
# In 2015-01-04, the temperature was higher than the previous day (20 -> 30).

# solution 1 MYSQL

SELECT w1.id
FROM Weather w1
JOIN Weather w2
ON DATEDIFF(w1.recordDate, w2.recordDate) = 1
WHERE w1.temperature > w2.temperature;

# 202. Happy Number
# Easy
# Topics
# Companies
# Write an algorithm to determine if a number n is happy.

# A happy number is a number defined by the following process:

# Starting with any positive integer, replace the number by the sum of the squares of its digits.
# Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
# Those numbers for which this process ends in 1 are happy.
# Return true if n is a happy number, and false if not.

# Example 1:

# Input: n = 19
# Output: true
# Explanation:
# 12 + 92 = 82
# 82 + 22 = 68
# 62 + 82 = 100
# 12 + 02 + 02 = 1
# Example 2:

# Input: n = 2
# Output: false

# Constraints:

# 1 <= n <= 231 - 1

def sep_n_sqr(num)
  next_num = 0
  puts "num: #{num}"
  squar_i = num.to_s.split('').each do |i|
    puts "i: #{i}"
    const = i.to_i**2
    puts "const #{const}"
    next_num += i.to_i**2
    puts "next_num: #{next_num}"
  end
  next_num
end

def is_happy(n)
  num_ary = []
  puts "n: #{n}"
  nxt_nm = sep_n_sqr(n)
  until nxt_nm === 1 || num_ary.include?(nxt_nm)
    num_ary.push(nxt_nm)
    nxt_nm = sep_n_sqr(nxt_nm)
    puts "nxt_nm: #{nxt_nm}"
  end
  print "num_ary: #{num_ary}"
  nxt_nm === 1
end

# 203. Remove Linked List Elements
# Easy
# Topics
# Companies
# Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

 

# Example 1:


# Input: head = [1,2,6,3,4,5,6], val = 6
# Output: [1,2,3,4,5]
# Example 2:

# Input: head = [], val = 1
# Output: []
# Example 3:

# Input: head = [7,7,7,7], val = 7
# Output: []
 

# Constraints:

# The number of nodes in the list is in the range [0, 104].
# 1 <= Node.val <= 50
# 0 <= val <= 50

# solution 1

# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val = 0, _next = nil)
#         @val = val
#         @next = _next
#     end
# end
# @param {ListNode} head
# @param {Integer} val
# @return {ListNode}
def remove_elements(head, val)

    node = head
    previous = head

    until node.nil?
        if head.val == val
            head = head.next
        end
        if node.val == val
            previous.next = node.next
        end
            previous = node
            node = node.next
    end
    head
end

# solution 1 refactored 

def remove_elements(head, val)
    # Handle all occurrences of val at the beginning (head)
    while head && head.val == val
        head = head.next
    end
    
    # Initialize pointers
    node = head
    previous = nil
    
    until node.nil?
        if node.val == val
            previous.next = node.next if previous # skip the node
        else
            previous = node # update previous only if node is kept
        end
        node = node.next
    end
    
    head
end

# solution 2

def remove_elements(head, val)
    # Create a dummy node that points to head
    dummy = ListNode.new(0)
    dummy.next = head
    
    # Initialize pointers
    previous = dummy
    node = head
    
    # Traverse the list
    until node.nil?
        if node.val == val
            previous.next = node.next # remove the node
        else
            previous = node # update previous only if node is kept
        end
        node = node.next
    end
    
    dummy.next # return the new head
end

# 205. Isomorphic Strings
# Easy
# Topics
# Companies
# Given two strings s and t, determine if they are isomorphic.

# Two strings s and t are isomorphic if the characters in s can be replaced to get t.

# All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

# Example 1:

# Input: s = "egg", t = "add"

# Output: true

# Explanation:

# The strings s and t can be made identical by:

# Mapping 'e' to 'a'.
# Mapping 'g' to 'd'.
# Example 2:

# Input: s = "foo", t = "bar"

# Output: false

# Explanation:

# The strings s and t can not be made identical as 'o' needs to be mapped to both 'a' and 'r'.

# Example 3:

# Input: s = "paper", t = "title"

# Output: true

 

# Constraints:

# 1 <= s.length <= 5 * 104
# t.length == s.length
# s and t consist of any valid ascii character.

# solution 1

def is_isomorphic(s, t)
    return false if s.length != t.length
    
    s_to_t = {}
    t_to_s = {}
    
    s.chars.each_with_index do |letter, i|
        # Current characters from both strings
        char_s = letter
        char_t = t[i]
        
        # Check if s -> t mapping is valid
        if s_to_t[char_s].nil?
            s_to_t[char_s] = char_t
        elsif s_to_t[char_s] != char_t
            return false
        end

        # Check if t -> s mapping is valid (this ensures uniqueness in t as well)
        if t_to_s[char_t].nil?
            t_to_s[char_t] = char_s
        elsif t_to_s[char_t] != char_s
            return false
        end
    end
    
    true
end

# solution 2

def is_isomorphic(s, t)
    return false if s.length != t.length
    
    # Convert each string to a pattern of first occurrence indices
    def first_occurrence_pattern(str)
        pattern = []
        map = {}
        
        str.chars.each_with_index do |char, i|
            map[char] ||= i  # Set the first occurrence index if not already set
            pattern << map[char]
        end
        
        pattern
    end
    
    first_occurrence_pattern(s) == first_occurrence_pattern(t)
end

# 206. Reverse Linked List
# Easy
# Topics
# Companies
# Given the head of a singly linked list, reverse the list, and return the reversed list.

 

# Example 1:


# Input: head = [1,2,3,4,5]
# Output: [5,4,3,2,1]
# Example 2:


# Input: head = [1,2]
# Output: [2,1]
# Example 3:

# Input: head = []
# Output: []
 

# Constraints:

# The number of nodes in the list is the range [0, 5000].
# -5000 <= Node.val <= 5000

# solution 1

current = head
    previous = nil

    until current.nil?  # This ensures we traverse the whole list
        next_node = current.next   # Store the next node
        current.next = previous    # Reverse the 'next' pointer
        previous = current         # Move 'previous' to this node
        current = next_node        # Move 'current' to the next node in the original list
    end

    # After the loop, 'previous' will point to the new head of the reversed list
    previous

# 217. Contains Duplicate
# Easy
# Topics
# Companies
# Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

# Example 1:

# Input: nums = [1,2,3,1]
# Output: true
# Example 2:

# Input: nums = [1,2,3,4]
# Output: false
# Example 3:

# Input: nums = [1,1,1,3,3,4,3,2,4,2]
# Output: true

# Constraints:

# 1 <= nums.length <= 105
# -109 <= nums[i] <= 109

def contains_duplicate(nums)
  nums.each do |i|
    nums.shift
    return true if nums.include?(i)

    return false
  end
end

# 219. Contains Duplicate II
# Easy
# Topics
# Companies
# Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

 

# Example 1:

# Input: nums = [1,2,3,1], k = 3
# Output: true
# Example 2:

# Input: nums = [1,0,1,1], k = 1
# Output: true
# Example 3:

# Input: nums = [1,2,3,1,2,3], k = 2
# Output: false
 

# Constraints:

# 1 <= nums.length <= 105
# -109 <= nums[i] <= 109
# 0 <= k <= 105

# solution 1

def contains_nearby_duplicate(nums, k)
    nums.each_with_index do |numA, i1|
        ((i1 + 1)..(nums.length - 1)).each do |i2|
            if numA == nums[i2] && i2 - i1 <= k
                return true
            end
        end
    end
    return false
end

# solution 1 refactored 

def contains_nearby_duplicate(nums, k)
    nums.each_with_index do |numA, i1|
        (i1 + 1).upto(nums.length - 1) do |i2|
            return true if numA == nums[i2] && i2 - i1 <= k
        end
    end
    false
end

# solution 2

def contains_nearby_duplicate(nums, k)
    hash_map = {}
    nums.each_with_index do |num, i|
        if hash_map[num].nil?
            hash_map[num] = i
        elsif !hash_map[num].nil? && i - hash_map[num] <= k
            return true
        elsif !hash_map[num].nil? && i - hash_map[num] > k
            hash_map[num] = i
        end
    end
    false
end

# solution 2 refactored 

def contains_nearby_duplicate(nums, k)
    hash_map = {}
    
    nums.each_with_index do |num, i|
        if hash_map[num] && i - hash_map[num] <= k
            return true
        end
        hash_map[num] = i  # Update the index of the current number
    end
    
    false
end

# 222. Count Complete Tree Nodes
# Easy
# Topics
# Companies
# Given the root of a complete binary tree, return the number of the nodes in the tree.

# According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

# Design an algorithm that runs in less than O(n) time complexity.

 

# Example 1:


# Input: root = [1,2,3,4,5,6]
# Output: 6
# Example 2:

# Input: root = []
# Output: 0
# Example 3:

# Input: root = [1]
# Output: 1
 

# Constraints:

# The number of nodes in the tree is in the range [0, 5 * 104].
# 0 <= Node.val <= 5 * 104
# The tree is guaranteed to be complete.

# soltuion 1

# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val = 0, left = nil, right = nil)
#         @val = val
#         @left = left
#         @right = right
#     end
# end
# @param {TreeNode} root
# @return {Integer}
def count_nodes(root)
    return 0 if root.nil?

    # Recursive function that counts the nodes
    left_count = count_nodes(root.left)  # count nodes in the left subtree
    right_count = count_nodes(root.right) # count nodes in the right subtree

    # Return the total count including the current node
    return 1 + left_count + right_count
end

# 225. Implement Stack using Queues
# Easy
# Topics
# Companies
# Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).

# Implement the MyStack class:

# void push(int x) Pushes element x to the top of the stack.
# int pop() Removes the element on the top of the stack and returns it.
# int top() Returns the element on the top of the stack.
# boolean empty() Returns true if the stack is empty, false otherwise.
# Notes:

# You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.
# Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.
 

# Example 1:

# Input
# ["MyStack", "push", "push", "top", "pop", "empty"]
# [[], [1], [2], [], [], []]
# Output
# [null, null, null, 2, 2, false]

# Explanation
# MyStack myStack = new MyStack();
# myStack.push(1);
# myStack.push(2);
# myStack.top(); // return 2
# myStack.pop(); // return 2
# myStack.empty(); // return False
 

# Constraints:

# 1 <= x <= 9
# At most 100 calls will be made to push, pop, top, and empty.
# All the calls to pop and top are valid.

# solution 1

class MyStack
    def initialize()
        @queue1 = Array.new
        @queue2 = Array.new
    end


=begin
    :type x: Integer
    :rtype: Void
=end
    def push(x)
        @queue1.push(x)
    end


=begin
    :rtype: Integer
=end
    def pop()
        while @queue1.length > 1
            @queue2 << @queue1.shift
        end
        result = @queue1.shift
        @queue1, @queue2 = @queue2, @queue1
        result
    end


=begin
    :rtype: Integer
=end
    def top()
         while @queue1.length > 1
            @queue2 << @queue1.shift
        end
        result = @queue1.shift
        @queue2 << result
        @queue1, @queue2 = @queue2, @queue1
        result
    end


=begin
    :rtype: Boolean
=end
    def empty()
       @queue1.length == 0
    end


end

# 226. Invert Binary Tree
# Easy
# Topics
# Companies
# Given the root of a binary tree, invert the tree, and return its root.

 

# Example 1:


# Input: root = [4,2,7,1,3,6,9]
# Output: [4,7,2,9,6,3,1]
# Example 2:


# Input: root = [2,1,3]
# Output: [2,3,1]
# Example 3:

# Input: root = []
# Output: []
 

# Constraints:

# The number of nodes in the tree is in the range [0, 100].
# -100 <= Node.val <= 100

# solution 1

# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val = 0, left = nil, right = nil)
#         @val = val
#         @left = left
#         @right = right
#     end
# end
# @param {TreeNode} root
# @return {TreeNode}
def invert_tree(root)
    return nil if root.nil?

    root.left, root.right = root.right, root.left

    invert_tree(root.left)
    invert_tree(root.right)

    root
end

# solution 2 iterative stack-based

# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val = 0, left = nil, right = nil)
#         @val = val
#         @left = left
#         @right = right
#     end
# end
def invert_tree(root)
    return nil if root.nil?

    stack = [root]  # Start with the root in the stack

    until stack.empty?
        node = stack.pop  # Pop the last node (DFS)

        # Swap the left and right children
        node.left, node.right = node.right, node.left

        # Push the children to the stack if they are not nil
        stack.push(node.left) unless node.left.nil?
        stack.push(node.right) unless node.right.nil?
    end

    root  # Return the root after inversion
end

# soltuion 3 iterative queue-based

# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val = 0, left = nil, right = nil)
#         @val = val
#         @left = left
#         @right = right
#     end
# end
def invert_tree(root)
    return nil if root.nil?

    stack = [root]  # Start with the root in the stack

    until stack.empty?
        node = stack.pop  # Pop the last node (DFS)

        # Swap the left and right children
        node.left, node.right = node.right, node.left

        # Push the children to the stack if they are not nil
        stack.push(node.left) unless node.left.nil?
        stack.push(node.right) unless node.right.nil?
    end

    root  # Return the root after inversion
end

# 228. Summary Ranges
# Easy
# Topics
# Companies
# You are given a sorted unique integer array nums.

# A range [a,b] is the set of all integers from a to b (inclusive).

# Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.

# Each range [a,b] in the list should be output as:

# "a->b" if a != b
# "a" if a == b

# Example 1:

# Input: nums = [0,1,2,4,5,7]
# Output: ["0->2","4->5","7"]
# Explanation: The ranges are:
# [0,2] --> "0->2"
# [4,5] --> "4->5"
# [7,7] --> "7"
# Example 2:

# Input: nums = [0,2,3,4,6,8,9]
# Output: ["0","2->4","6","8->9"]
# Explanation: The ranges are:
# [0,0] --> "0"
# [2,4] --> "2->4"
# [6,6] --> "6"
# [8,9] --> "8->9"

# Constraints:

# 0 <= nums.length <= 20
# -231 <= nums[i] <= 231 - 1
# All the values of nums are unique.
# nums is sorted in ascending order.

# solution 1

def summary_ranges(nums)
  answer = []
  range = []
  nums.each_with_index do |num, i|
    if range.length <= 0 && num + 1 == nums[i + 1]
      range.push(num)
    elsif range.length <= 0 && num + 1 != nums[i + 1]
      range.push(num)
      answer.push(range.join(''))
      range = []
    elsif num + 1 != nums[i + 1]
      range.push(num)
      answer.push(range.join('->'))
      range = []
    end
  end
  answer
end

# solution 1 refactored

def summary_ranges(nums)
  answer = []
  start = 0

  nums.each_with_index do |num, i|
    # If the next number is not consecutive or we've reached the end
    next unless i == nums.length - 1 || nums[i + 1] != num + 1

    if start == i
      answer.push("#{nums[start]}")
    else
      answer.push("#{nums[start]}->#{num}")
    end
    start = i + 1
  end

  answer
end

# solution 2

def summary_ranges(nums)
  return [] if nums.empty?

  start = nums.first
  answer = []

  nums.each_cons(2) do |a, b|
    if b != a + 1
      answer << (start == a ? "#{start}" : "#{start}->#{a}")
      start = b
    end
  end

  answer << (start == nums.last ? "#{start}" : "#{start}->#{nums.last}")
  answer
end

# 231. Power of Two
# Easy
# Topics
# Companies
# Given an integer n, return true if it is a power of two. Otherwise, return false.

# An integer n is a power of two, if there exists an integer x such that n == 2x.

# Example 1:

# Input: n = 1
# Output: true
# Explanation: 20 = 1
# Example 2:

# Input: n = 16
# Output: true
# Explanation: 24 = 16
# Example 3:

# Input: n = 3
# Output: false

# solution 1

def is_power_of_two(n)
  return true if n == 1

  n /= 2 until n.odd? || n == 2

  if n.odd?
    false
  elsif n == 2
    true
  end
end

# solution 2 refactor

def is_power_of_two(n)
  # Edge case: if n is less than or equal to 0, it cannot be a power of two.
  return false if n <= 0

  # Keep dividing n by 2 as long as it's even and greater than 1.
  n /= 2 while n > 1 && n.even?

  # If n is reduced to 1, it was a power of two.
  n == 1
end

# 232. Implement Queue using Stacks
# Easy
# Topics
# Companies
# Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).

# Implement the MyQueue class:

# void push(int x) Pushes element x to the back of the queue.
# int pop() Removes the element from the front of the queue and returns it.
# int peek() Returns the element at the front of the queue.
# boolean empty() Returns true if the queue is empty, false otherwise.
# Notes:

# You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.
# Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.
 

# Example 1:

# Input
# ["MyQueue", "push", "push", "peek", "pop", "empty"]
# [[], [1], [2], [], [], []]
# Output
# [null, null, null, 1, 1, false]

# Explanation
# MyQueue myQueue = new MyQueue();
# myQueue.push(1); // queue is: [1]
# myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
# myQueue.peek(); // return 1
# myQueue.pop(); // return 1, queue is [2]
# myQueue.empty(); // return false
 

# Constraints:

# 1 <= x <= 9
# At most 100 calls will be made to push, pop, peek, and empty.
# All the calls to pop and peek are valid.

# solution 1

class MyQueue
    def initialize()
        @stack1 = []  # The "input" stack
        @stack2 = []  # The "output" stack
    end

    # Pushes element to the back of the queue
    def push(x)
        @stack1 << x
    end

    # Removes the element from the front of the queue
    def pop()
        if @stack2.empty?
            transfer_stack1_to_stack2
        end
        @stack2.pop
    end

    # Returns the front element without removing it
    def peek()
        if @stack2.empty?
            transfer_stack1_to_stack2
        end
        @stack2[-1]
    end

    # Returns whether the queue is empty
    def empty()
        @stack1.empty? && @stack2.empty?
    end

    # Helper method to transfer elements from stack1 to stack2
    def transfer_stack1_to_stack2
        until @stack1.empty?
            @stack2 << @stack1.pop
        end
    end
end

# 234. Palindrome Linked List
# Easy
# Topics
# Companies
# Given the head of a singly linked list, return true if it is a 
# palindrome
#  or false otherwise.

 

# Example 1:


# Input: head = [1,2,2,1]
# Output: true
# Example 2:


# Input: head = [1,2]
# Output: false
 

# Constraints:

# The number of nodes in the list is in the range [1, 105].
# 0 <= Node.val <= 9

# solution 1

# Definition for singly-linked list.
# class ListNode
#     attr_accessor :val, :next
#     def initialize(val = 0, _next = nil)
#         @val = val
#         @next = _next
#     end
# end
# @param {ListNode} head
# @return {Boolean}
def is_palindrome(head)
    return true if head.nil? || head.next.nil?  # Edge case for empty or single-node list

    # Step 1: Find the middle using the slow and fast pointers
    single_step = head
    double_step = head

    while double_step&.next&.next
        single_step = single_step.next
        double_step = double_step.next.next
    end

    # Step 2: Reverse the second half of the list
    current = single_step.next
    prev = nil

    while current
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node
    end

    # Step 3: Compare the first and second halves
    first_half = head
    second_half = prev  # 'prev' is now the head of the reversed second half

    while second_half
        return false if first_half.val != second_half.val
        first_half = first_half.next
        second_half = second_half.next
    end

    true
end

# 242. Valid Anagram
# Easy
# Topics
# Companies
# Given two strings s and t, return true if t is an anagram of s, and false otherwise.

# An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

# Example 1:

# Input: s = "anagram", t = "nagaram"
# Output: true
# Example 2:

# Input: s = "rat", t = "car"
# Output: false

# Constraints:

# 1 <= s.length, t.length <= 5 * 104
# s and t consist of lowercase English letters.

# solution 1

def is_anagram(s, t)
  s_sorted = s.split('').sort
  t_sorted = t.split('').sort
  return true if s_sorted == t_sorted

  false
end

# solution 1 refactored

def is_anagram(s, t)
  s.chars.sort == t.chars.sort
end

# solution 2(not efficient with nested loop)

def is_anagram(s, t)
  s.each_char do |char1|
    t.each_char do |char2|
      if char1 == char2
        s.delete! char1
        t.delete! char2
      end
    end
  end
  return true if s.empty? == true && t.empty? == true

  false
end

# solution 3

def is_anagram(s, t)
  return false if s.length != t.length

  s_freq = Hash.new(0)
  t_freq = Hash.new(0)

  s.each_char { |char| s_freq[char] += 1 }
  t.each_char { |char| t_freq[char] += 1 }

  s_freq == t_freq
end

# solution 3 refactored

def is_anagram(s, t)
  return false if s.length != t.length

  char_count = Hash.new(0)

  s.each_char { |char| char_count[char] += 1 }
  t.each_char { |char| char_count[char] -= 1 }

  char_count.all? { |_, count| count == 0 }
end

# 257. Binary Tree Paths
# Easy
# Topics
# Companies
# Given the root of a binary tree, return all root-to-leaf paths in any order.

# A leaf is a node with no children.

 

# Example 1:


# Input: root = [1,2,3,null,5]
# Output: ["1->2->5","1->3"]
# Example 2:

# Input: root = [1]
# Output: ["1"]
 

# Constraints:

# The number of nodes in the tree is in the range [1, 100].
# -100 <= Node.val <= 100

# solution 1

# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val = 0, left = nil, right = nil)
#         @val = val
#         @left = left
#         @right = right
#     end
# end
# @param {TreeNode} root
# @return {String[]}
def binary_tree_paths(root)
    answer = []
    path = ""
    node = root 

    def traverse(node, path, answer)
        if path == "" 
            path += "#{node.val}"
        else    
            path += "->#{node.val}"
        end
        if node.left.nil? && node.right.nil?
            answer << path
        end
        if node.left
            traverse(node.left, path, answer)
        end
        if node.right
            traverse(node.right, path, answer)
        end
    end

    traverse(node, path, answer)

    answer
end

# solution 1 refactored

def binary_tree_paths(root)
    return [] if root.nil?
    
    answer = []
    
    def traverse(node, path, answer)
        path << node.val
        
        if node.left.nil? && node.right.nil?
            # Join the path array to form the string when you reach a leaf node
            answer << path.join('->')
        else
            traverse(node.left, path.dup, answer) if node.left
            traverse(node.right, path.dup, answer) if node.right
        end
    end

    traverse(root, [], answer)
    answer
end


# 258. Add Digits
# Easy
# Topics
# Companies
# Hint
# Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.

# Example 1:

# Input: num = 38
# Output: 2
# Explanation: The process is
# 38 --> 3 + 8 --> 11
# 11 --> 1 + 1 --> 2
# Since 2 has only one digit, return it.
# Example 2:

# Input: num = 0
# Output: 0

# Constraints:

# 0 <= num <= 231 - 1

# solution 1

def add_digits(num)
  while num >= 10 # Continue until the number is a single digit
    sum = 0

    # Split the number into digits and sum them
    num.to_s.each_char do |digit|
      sum += digit.to_i
    end

    # Set num to the new sum
    num = sum
  end

  num
end

# 263. Ugly Number
# Easy
# Topics
# Companies
# An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

# Given an integer n, return true if n is an ugly number.

 

# Example 1:

# Input: n = 6
# Output: true
# Explanation: 6 = 2 × 3
# Example 2:

# Input: n = 1
# Output: true
# Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.
# Example 3:

# Input: n = 14
# Output: false
# Explanation: 14 is not ugly since it includes the prime factor 7.
 

# Constraints:

# -231 <= n <= 231 - 1

# solution 1

# 268. Missing Number
# Easy
# Topics
# Companies
# Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

# Example 1:

# Input: nums = [3,0,1]
# Output: 2
# Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
# Example 2:

# Input: nums = [0,1]
# Output: 2
# Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
# Example 3:

# Input: nums = [9,6,4,2,3,5,7,0,1]
# Output: 8
# Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.

# Constraints:

# n == nums.length
# 1 <= n <= 104
# 0 <= nums[i] <= n
# All the numbers of nums are unique.

# solution 1
def missing_number(nums)
  (0..nums.length).each do |i|
    return i unless nums.include?(i)
  end
end

# solution 2

def missing_number(nums)
  n = nums.length
  expected_sum = n * (n + 1) / 2
  actual_sum = nums.sum
  expected_sum - actual_sum
end

# 278. First Bad Version
# Easy
# Topics
# Companies
# You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

# Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

# You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

# Example 1:

# Input: n = 5, bad = 4
# Output: 4
# Explanation:
# call isBadVersion(3) -> false
# call isBadVersion(5) -> true
# call isBadVersion(4) -> true
# Then 4 is the first bad version.
# Example 2:

# Input: n = 1, bad = 1
# Output: 1

# Constraints:

# 1 <= bad <= n <= 231 - 1

# solution 1

def first_bad_version(n)
  left = 1
  right = n

  while left < right
    mid = left + (right - left) / 2

    if is_bad_version(mid)
      right = mid # The first bad version is at mid or before it
    else
      left = mid + 1 # The first bad version is after mid
    end
  end

  left # Left will point to the first bad version
end

# 283. Move Zeroes
# Easy
# Topics
# Companies
# Hint
# Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

# Note that you must do this in-place without making a copy of the array.

 

# Example 1:

# Input: nums = [0,1,0,3,12]
# Output: [1,3,12,0,0]
# Example 2:

# Input: nums = [0]
# Output: [0]
 

# Constraints:

# 1 <= nums.length <= 104
# -231 <= nums[i] <= 231 - 1

# solution 1

def move_zeroes(nums)
    (nums.length - 1).downto(0).each do |i|
        if nums[i] == 0 
            nums[nums.length - 1] = nums.delete_at(i)
        end
    end

    nums
end

# solution 2

def move_zeroes(nums)
    insert_pos = 0
    
    # Move non-zero elements to the front
    nums.each do |num|
        if num != 0
            nums[insert_pos] = num
            insert_pos += 1
        end
    end
    
    # Fill the rest with zeroes
    (insert_pos...nums.length).each do |i|
        nums[i] = 0
    end
    
    nums
end

# 290. Word Pattern
# Easy
# Topics
# Companies
# Given a pattern and a string s, find if s follows the same pattern.

# Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

# Example 1:

# Input: pattern = "abba", s = "dog cat cat dog"
# Output: true
# Example 2:

# Input: pattern = "abba", s = "dog cat cat fish"
# Output: false
# Example 3:

# Input: pattern = "aaaa", s = "dog cat cat dog"
# Output: false

# Constraints:

# 1 <= pattern.length <= 300
# pattern contains only lower-case English letters.
# 1 <= s.length <= 3000
# s contains only lowercase English letters and spaces ' '.
# s does not contain any leading or trailing spaces.
# All the words in s are separated by a single space.

# solution 1 has problems

def word_pattern(pattern, s)
  pattern = pattern.split('')
  s = s.split(' ')

  tracker = {}

  return false if pattern.length != s.length

  (0..pattern.length).each do |i|
    if !tracker.include?(pattern[i]) && !tracker.include?(s[i])
      tracker[pattern[i]] = s[i]
    elsif tracker.include?(pattern[i]) && tracker[pattern[i]] != s[i]
      return false
    end
  end
  true
end

# solution 1 fixed with one hash

def word_pattern(pattern, s)
  pattern = pattern.split('')
  s = s.split(' ')

  return false if pattern.length != s.length

  tracker = {}

  pattern.each_with_index do |char, i|
    if !tracker.include?(char) && !tracker.value?(s[i])
      tracker[char] = s[i]
    elsif tracker.include?(char) && tracker[char] != s[i]
      return false
    end
  end

  true
end

# solution 1 fixed with 2 hashes

def word_pattern(pattern, s)
  pattern = pattern.split('')
  s = s.split(' ')

  tracker = {}

  return false if pattern.length != s.length

  (0..pattern.length).each do |i|
    if !tracker.include?(pattern[i]) && !tracker.include?(s[i])
      tracker[pattern[i]] = s[i]
    elsif tracker.include?(pattern[i]) && tracker[pattern[i]] != s[i]
      return false
    end
  end
  true
end

# 292. Nim Game
# Easy
# Topics
# Companies
# Hint
# You are playing the following Nim Game with your friend:

# Initially, there is a heap of stones on the table.
# You and your friend will alternate taking turns, and you go first.
# On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.
# The one who removes the last stone is the winner.
# Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.

 

# Example 1:

# Input: n = 4
# Output: false
# Explanation: These are the possible outcomes:
# 1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.
# 2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.
# 3. You remove 3 stones. Your friend removes the last stone. Your friend wins.
# In all outcomes, your friend wins.
# Example 2:

# Input: n = 1
# Output: true
# Example 3:

# Input: n = 2
# Output: true
 

# Constraints:

# 1 <= n <= 231 - 1

# solution 1

def can_win_nim(n)
    n % 4 != 0
end

# 303. Range Sum Query - Immutable
# Easy
# Topics
# Companies
# Given an integer array nums, handle multiple queries of the following type:

# Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
# Implement the NumArray class:

# NumArray(int[] nums) Initializes the object with the integer array nums.
# int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 

# Example 1:

# Input
# ["NumArray", "sumRange", "sumRange", "sumRange"]
# [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
# Output
# [null, 1, -1, -3]

# Explanation
# NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
# numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
# numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
# numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3
 

# Constraints:

# 1 <= nums.length <= 104
# -105 <= nums[i] <= 105
# 0 <= left <= right < nums.length
# At most 104 calls will be made to sumRange.

# solution 1

class NumArray

=begin
    :type nums: Integer[]
=end
    def initialize(nums)
        @nums = Array.new(nums)
    end


=begin
    :type left: Integer
    :type right: Integer
    :rtype: Integer
=end
    def sum_range(left, right)
        answer = 0
        until left > right
            answer += @nums[left]
            left += 1
        end
        answer
    end


end

# solution 2

class NumArray
    def initialize(nums)
        @prefix_sum = Array.new(nums.size, 0)
        
        # Build the prefix sum array
        @prefix_sum[0] = nums[0]
        (1...nums.size).each do |i|
            @prefix_sum[i] = @prefix_sum[i - 1] + nums[i]
        end
    end

    def sum_range(left, right)
        if left == 0
            return @prefix_sum[right]
        else
            return @prefix_sum[right] - @prefix_sum[left - 1]
        end
    end
end

# 326. Power of Three
# Solved
# Easy
# Topics
# Companies
# Given an integer n, return true if it is a power of three. Otherwise, return false.

# An integer n is a power of three, if there exists an integer x such that n == 3x.

 

# Example 1:

# Input: n = 27
# Output: true
# Explanation: 27 = 33
# Example 2:

# Input: n = 0
# Output: false
# Explanation: There is no x where 3x = 0.
# Example 3:

# Input: n = -1
# Output: false
# Explanation: There is no x where 3x = (-1).
 

# Constraints:

# -231 <= n <= 231 - 1

# solution 1

def is_power_of_three(n)
    return false if n <= 0 

    until n < 3
        n /= 3.0
    end

    if n == 1   
        return true
    else
        return false
    end
end

# solution 1 refactored 

def is_power_of_three(n)
    return false if n <= 0 

    n /= 3.0 while n >= 3

    n == 1  
end

# solution 2 (cleaner w/o floating number)

def is_power_of_three(n)
  return false if n <= 0
  while n % 3 == 0
    n /= 3
  end
  n == 1
end

# 338. Counting Bits
# Easy
# Topics
# Companies
# Hint
# Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.

 

# Example 1:

# Input: n = 2
# Output: [0,1,1]
# Explanation:
# 0 --> 0
# 1 --> 1
# 2 --> 10
# Example 2:

# Input: n = 5
# Output: [0,1,1,2,1,2]
# Explanation:
# 0 --> 0
# 1 --> 1
# 2 --> 10
# 3 --> 11
# 4 --> 100
# 5 --> 101
 

# Constraints:

# 0 <= n <= 105

# solution 1

def count_bits(n)
    ans = []
    
    (0..n).each do |i|
        counter = 0
        num_to_bi = i.to_s(2)
        num_to_bi.each_char do |j|
            if j == "1"
                counter += 1
            end
        end
        ans << counter
    end
    
    ans
end

# solution 1 refactored 

def count_bits(n)
    (0..n).map { |i| i.to_s(2).count('1') }
end

# solution 2

def count_bits(n)
  ans = [0] * (n + 1)  # Initialize an array of size n+1 to store results
  
  (1..n).each do |i|
    ans[i] = ans[i >> 1] + (i & 1)
  end
  
  ans
end

# 342. Power of Four
# Easy
# Topics
# Companies
# Given an integer n, return true if it is a power of four. Otherwise, return false.

# An integer n is a power of four, if there exists an integer x such that n == 4x.

 

# Example 1:

# Input: n = 16
# Output: true
# Example 2:

# Input: n = 5
# Output: false
# Example 3:

# Input: n = 1
# Output: true
 

# Constraints:

# -231 <= n <= 231 - 1

# solution 1

def is_power_of_four(n)
    return false if n <= 0

    n /= 4.0 while n >= 4

    n == 1
end

# solution 2

def is_power_of_four(n)
  # Check if n is a positive power of two
  return false if n <= 0 || (n & (n - 1)) != 0
  
  # Check if the only set bit is in the correct position for a power of 4
  # 0x55555555 is a binary number with bits set at odd positions (i.e., 1010101010101010101010101010101 in binary)
  (n & 0x55555555) != 0
end


# 344. Reverse String
# Easy
# Topics
# Companies
# Hint
# Write a function that reverses a string. The input string is given as an array of characters s.

# You must do this by modifying the input array in-place with O(1) extra memory.

 

# Example 1:

# Input: s = ["h","e","l","l","o"]
# Output: ["o","l","l","e","h"]
# Example 2:

# Input: s = ["H","a","n","n","a","h"]
# Output: ["h","a","n","n","a","H"]
 

# Constraints:

# 1 <= s.length <= 105
# s[i] is a printable ascii character.

# solution 1

def reverse_string(s)
    front = 0
    back = s.length - 1

    until back <= front 
        s[front], s[back] = s[back], s[front]
        front += 1
        back -= 1
    end

    s 
end

# 345. Reverse Vowels of a String
# Easy
# Topics
# Companies
# Given a string s, reverse only all the vowels in the string and return it.

# The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.

# Example 1:

# Input: s = "hello"
# Output: "holle"
# Example 2:

# Input: s = "leetcode"
# Output: "leotcede"

# Constraints:

# 1 <= s.length <= 3 * 105
# s consist of printable ASCII characters.

# solution 1

def reverse_vowels(s)
  vowels = 'aeiou'
  vwl_ary = []
  s.chars do |letter|
    if vowels.include?(letter)
      vwl_ary.push(letter)
      s.sub!(letter, '!')
    end
  end
  vwl_ary.reverse.each do |letter|
    s.sub!('!', letter)
  end
  s
end

# solution 2

def reverse_vowels(s)
  vowels = 'aeiouAEIOU'
  left = 0
  right = s.length - 1
  s_chars = s.chars

  while left < right
    left += 1 while left < right && !vowels.include?(s_chars[left])
    right -= 1 while left < right && !vowels.include?(s_chars[right])

    next unless left < right

    s_chars[left], s_chars[right] = s_chars[right], s_chars[left]
    left += 1
    right -= 1
  end

  s_chars.join
end

# 349. Intersection of Two Arrays
# Easy
# Topics
# Companies
# Given two integer arrays nums1 and nums2, return an array of their 
# intersection
# . Each element in the result must be unique and you may return the result in any order.

 

# Example 1:

# Input: nums1 = [1,2,2,1], nums2 = [2,2]
# Output: [2]
# Example 2:

# Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
# Output: [9,4]
# Explanation: [4,9] is also accepted.
 

# Constraints:

# 1 <= nums1.length, nums2.length <= 1000
# 0 <= nums1[i], nums2[i] <= 1000

# solution 1

def intersection(nums1, nums2)
    answer = []
    nums1uni = nums1.uniq
    nums2uni = nums2.uniq

    nums1uni.each do |i|
        if nums2uni.include?(i)
            answer << i
        end
    end

    answer
end

# solution 2 with hash map for more efficiency 

def intersection(nums1, nums2)
  # Create a hash map to store elements of the first array.
  element_map = {}
  nums1.each { |num| element_map[num] = true }

  # Find common elements using the hash map.
  result = []
  nums2.each do |num|
    if element_map[num]
      result << num
      element_map.delete(num) # Ensure each element is only added once.
    end
  end

  result
end

# solution 3 with sets 

require 'set'

def intersection(nums1, nums2)
  # Convert both arrays to sets to remove duplicates and perform intersection.
  set1 = nums1.to_set
  set2 = nums2.to_set

  # Return the intersection of both sets as an array.
  (set1 & set2).to_a
end

# 350. Intersection of Two Arrays II
# Easy
# Topics
# Companies
# Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

 

# Example 1:

# Input: nums1 = [1,2,2,1], nums2 = [2,2]
# Output: [2,2]
# Example 2:

# Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
# Output: [4,9]
# Explanation: [9,4] is also accepted.
 

# Constraints:

# 1 <= nums1.length, nums2.length <= 1000
# 0 <= nums1[i], nums2[i] <= 1000

# solution 1

def intersect(nums1, nums2)
    hashmap = {}

    nums1.each { |num| 
        if hashmap[num]
            hashmap[num] += 1
        else
            hashmap[num] = 1
        end
    }

    result = []
    nums2.each do |num|
        if hashmap[num] && hashmap[num] > 0
            result << num
            hashmap[num] -= 1
        end
    end 

    result
end

# solution 1 refactored map smallest array 

def intersect(nums1, nums2)
  # Ensure nums1 is the smaller array to minimize space usage.
  if nums1.length > nums2.length
    return intersect(nums2, nums1)
  end

  # Build a frequency map from the smaller array.
  hashmap = {}
  nums1.each do |num|
    hashmap[num] = (hashmap[num] || 0) + 1
  end

  result = []
  nums2.each do |num|
    if hashmap[num] && hashmap[num] > 0
      result << num
      hashmap[num] -= 1
    end
  end

  result
end

# 367. Valid Perfect Square
# Easy
# Topics
# Companies
# Given a positive integer num, return true if num is a perfect square or false otherwise.

# A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.

# You must not use any built-in library function, such as sqrt.

 

# Example 1:

# Input: num = 16
# Output: true
# Explanation: We return true because 4 * 4 = 16 and 4 is an integer.
# Example 2:

# Input: num = 14
# Output: false
# Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.
 

# Constraints:

# 1 <= num <= 231 - 1

# solution 1

def is_perfect_square(num)
    return true if num == 1
    low = 1
    high = num

    while low <= high
        mid = (low + high) / 2
        square = mid * mid 

        if square == num
            return true
        elsif square > num
            high = mid - 1
        else 
            low = mid + 1
        end
    end
    return false 
end

# 520. Detect Capital
# Easy
# Topics
# Companies
# We define the usage of capitals in a word to be right when one of the following cases holds:

# All letters in this word are capitals, like "USA".
# All letters in this word are not capitals, like "leetcode".
# Only the first letter in this word is capital, like "Google".
# Given a string word, return true if the usage of capitals in it is right.

# Example 1:

# Input: word = "USA"
# Output: true
# Example 2:

# Input: word = "FlaG"
# Output: false

# Constraints:

# 1 <= word.length <= 100
# word consists of lowercase and uppercase English letters.

def detect_capital_use(word)
  cap_count = 0
  wrd_ary = word.split('')
  wrd_ary.each do |char|
    cap_count += 1 if char === char.upcase
  end
  puts "wrd_ary: #{wrd_ary}"
  puts "cap_count: #{cap_count}"
  puts "ap_count = wrd_ary.length: #{ap_count = wrd_ary.length}"
  puts "wrd_ary[0] === wrd_ary[0].upcase: #{wrd_ary[0] === wrd_ary[0].upcase}"
  if (cap_count == 0) ||
     (wrd_ary[0] === wrd_ary[0].upcase && cap_count == wrd_ary.length) ||
     (wrd_ary[0] === wrd_ary[0].upcase && cap_count == 1)
    true
  else
    false
  end
end

# 796. Rotate String
# Easy
# Topics
# Companies
# Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.

# A shift on s consists of moving the leftmost character of s to the rightmost position.

# For example, if s = "abcde", then it will be "bcdea" after one shift.

# Example 1:

# Input: s = "abcde", goal = "cdeab"
# Output: true
# Example 2:

# Input: s = "abcde", goal = "abced"
# Output: false

# Constraints:

# 1 <= s.length, goal.length <= 100
# s and goal consist of lowercase English letters.

# solution 1

def rotate_string(s, goal)
  str_to_a = s.split('')
  puts "str_to_a #{str_to_a}"
  puts "str_to_a.join #{str_to_a.join('')}"
  puts "str_to_a.to_s #{str_to_a}"
  index = 0
  until str_to_a.join('') == goal || index > str_to_a.length
    str_to_a.push(str_to_a[0])
    str_to_a.shift
    index += 1
  end
  if index > str_to_a.length
    false
  elsif str_to_a.join('') == goal
    true
  end
end

# solution 2

def rotate_string(s, goal)
  return false if s.length != goal.length # Early exit if lengths are different

  (s + s).include?(goal)
end

# 3151. Special Array I
# Easy
# Topics
# Companies
# Hint
# An array is considered special if every pair of its adjacent elements contains two numbers with different parity.

# You are given an array of integers nums. Return true if nums is a special array, otherwise, return false.

# Example 1:

# Input: nums = [1]

# Output: true

# Explanation:

# There is only one element. So the answer is true.

# Example 2:

# Input: nums = [2,1,4]

# Output: true

# Explanation:

# There is only two pairs: (2,1) and (1,4), and both of them contain numbers with different parity. So the answer is true.

# Example 3:

# Input: nums = [4,3,1,6]

# Output: false

# Explanation:

# nums[1] and nums[2] are both odd. So the answer is false.

# Constraints:

# 1 <= nums.length <= 100
# 1 <= nums[i] <= 100

# solution 1

def is_array_special(nums)
  return true if nums.length == 1

  char = ''
  nums.each do |i|
    if char === ''
      char = i
    elsif (char.even? && i.even?) ||
          (char.odd? && i.odd?)
      return false
    else
      char = i
    end
  end
  true
end

# solution 1 refactor

def is_array_special(nums)
  return true if nums.length == 1

  nums.each_cons(2) do |a, b|
    return false if (a.even? && b.even?) || (a.odd? && b.odd?)
  end

  true
end

# 3174. Clear Digits
# Easy
# Topics
# Companies
# Hint
# You are given a string s.

# Your task is to remove all digits by doing this operation repeatedly:

# Delete the first digit and the closest non-digit character to its left.
# Return the resulting string after removing all digits.

# Example 1:

# Input: s = "abc"

# Output: "abc"

# Explanation:

# There is no digit in the string.

# Example 2:

# Input: s = "cb34"

# Output: ""

# Explanation:

# First, we apply the operation on s[2], and s becomes "c4".

# Then we apply the operation on s[1], and s becomes "".

# Constraints:

# 1 <= s.length <= 100
# s consists only of lowercase English letters and digits.
# The input is generated such that it is possible to delete all digits.

# solution 1

def clear_digits(s)
  s_ary = s.split('')
  ary = []
  index = 0
  disp_idx = 0
  s_ary.each do |char|
    if ('0'..'9').include?(char)
      puts "char = int?: #{('0'..'9').include?(char)}"
      ary.push(index)
    end
    index += 1
    puts "index: #{index}"
  end
  puts "ary: #{ary}"
  ary.each do |idx|
    s_ary.delete_at(idx - disp_idx)
    s_ary.delete_at(idx - disp_idx - 1)
    disp_idx += 2
    puts "s_ary: #{s_ary}"
  end
  s_ary.join('')
end

# solution 1 refactor

def clear_digits(s)
  s_ary = s.chars
  digit_indices = []

  s_ary.each_with_index do |char, index|
    digit_indices << index if char.match?(/[0-9]/)
  end

  # Delete digits and their left non-digit characters
  digit_indices.reverse.each do |idx|
    s_ary.delete_at(idx) # Remove the digit
    s_ary.delete_at(idx - 1) if idx > 0 # Remove the closest non-digit to its left
  end

  s_ary.join('')
end

# slution 2

def clear_digits(s)
  stack = []

  s.each_char do |char|
    if char.match?(/[0-9]/)
      stack.pop if stack.any? # Remove the closest non-digit to its left
    else
      stack.push(char) # Add non-digit character to the stack
    end
  end

  stack.join('')
end

# 412. Fizz Buzz
# Easy
# Topics
# Companies
# Given an integer n, return a string array answer (1-indexed) where:

# answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
# answer[i] == "Fizz" if i is divisible by 3.
# answer[i] == "Buzz" if i is divisible by 5.
# answer[i] == i (as a string) if none of the above conditions are true.

# Example 1:

# Input: n = 3
# Output: ["1","2","Fizz"]
# Example 2:

# Input: n = 5
# Output: ["1","2","Fizz","4","Buzz"]
# Example 3:

# Input: n = 15
# Output: ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]

# Constraints:

# 1 <= n <= 104

# solution 1

def fizz_buzz(n)
  # create empty answer array
  answer = []
  # iterate through range 1...n
  for i in 1...n + 1
    # check if n is divisible by 3, 5, both or none
    # depending what condition is met, .push the appropriate
    # integer(as string), or Fizz, Bar or both.
    if i % 3 == 0 && i % 5 == 0
      answer.push('FizzBuzz')
    elsif i % 3 == 0 && i % 5 != 0
      answer.push('Fizz')
    elsif i % 5 == 0 && i % 3 != 0
      answer.push('Buzz')
    else
      answer.push("#{i}")
    end
  end
  # return answer
  answer
end

# solution 1 refactored

def fizz_buzz(n)
  # create empty answer array
  answer = []
  # iterate through range 1...n
  for i in 1...n + 1
    # check if n is divisible by 3, 5, both or none
    # depending what condition is met, .push the appropriate
    # integer(as string), or Fizz, Bar or both.
    if i % 3 == 0 && i % 5 == 0
      answer.push('FizzBuzz')
    elsif i % 3 == 0 && i % 5 != 0
      answer.push('Fizz')
    elsif i % 5 == 0 && i % 3 != 0
      answer.push('Buzz')
    else
      answer.push("#{i}")
    end
  end
  # return answer
  answer
end

# solution 2

def fizz_buzz(n)
  (1..n).map do |i|
    result = ''
    result += 'Fizz' if i % 3 == 0
    result += 'Buzz' if i % 5 == 0
    result.empty? ? i.to_s : result
  end
end

# 485. Max Consecutive Ones
# Easy
# Topics
# Companies
# Hint
# Given a binary array nums, return the maximum number of consecutive 1's in the array.

# Example 1:

# Input: nums = [1,1,0,1,1,1]
# Output: 3
# Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.
# Example 2:

# Input: nums = [1,0,1,1,0,1]
# Output: 2

# Constraints:

# 1 <= nums.length <= 105
# nums[i] is either 0 or 1.

# solution 1

def find_max_consecutive_ones(nums)
  answer = 0
  counter = 0
  nums.each do |i|
    if i == 1
      counter += 1
      answer = counter if counter > answer
    else
      counter = 0
    end
  end
  answer
end

# solution 1 refactor

def find_max_consecutive_ones(nums)
  max_count = 0
  current_count = 0

  nums.each do |num|
    if num == 1
      current_count += 1
      max_count = [max_count, current_count].max
    else
      current_count = 0
    end
  end

  max_count
end

# solution 2

def find_max_consecutive_ones(nums)
  nums.join.split('0').map(&:length).max
end

# 500. Keyboard Row
# Easy
# Topics
# Companies
# Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.

# In the American keyboard:

# the first row consists of the characters "qwertyuiop",
# the second row consists of the characters "asdfghjkl", and
# the third row consists of the characters "zxcvbnm".

# Example 1:

# Input: words = ["Hello","Alaska","Dad","Peace"]
# Output: ["Alaska","Dad"]
# Example 2:

# Input: words = ["omk"]
# Output: []
# Example 3:

# Input: words = ["adsdf","sfd"]
# Output: ["adsdf","sfd"]

# Constraints:

# 1 <= words.length <= 20
# 1 <= words[i].length <= 100
# words[i] consists of English letters (both lowercase and uppercase).

# solution 1

def find_words(words)
  row1 = 'qwertyuiop'
  row2 = 'asdfghjkl'
  row3 = 'zxcvbnm'

  answer = []

  words.each do |word|
    wrd_row = 0
    char_row = 0
    valid = true

    word.each_char do |char|
      char = char.downcase # To handle case insensitivity

      if wrd_row == 0 && row1.include?(char)
        wrd_row = 1
        char_row = 1
      elsif wrd_row == 0 && row2.include?(char)
        wrd_row = 2
        char_row = 2
      elsif wrd_row == 0 && row3.include?(char)
        wrd_row = 3
        char_row = 3
      elsif wrd_row > 0 && row1.include?(char)
        char_row = 1
      elsif wrd_row > 0 && row2.include?(char)
        char_row = 2
      elsif wrd_row > 0 && row3.include?(char)
        char_row = 3
      end

      if wrd_row != char_row
        valid = false
        break
      end
    end

    answer.push(word) if valid
  end

  answer
end

# solution 2

def find_words(words)
  row1 = Set.new('qwertyuiop')
  row2 = Set.new('asdfghjkl')
  row3 = Set.new('zxcvbnm')

  answer = []

  words.each do |word|
    downcased_word = word.downcase
    first_char = downcased_word[0]

    target_row = if row1.include?(first_char)
                   row1
                 elsif row2.include?(first_char)
                   row2
                 else
                   row3
                 end

    answer.push(word) if downcased_word.chars.all? { |char| target_row.include?(char) }
  end

  answer
end

# solution 3

def find_words(words)
  rows = {
    'q' => 1, 'w' => 1, 'e' => 1, 'r' => 1, 't' => 1, 'y' => 1, 'u' => 1, 'i' => 1, 'o' => 1, 'p' => 1,
    'a' => 2, 's' => 2, 'd' => 2, 'f' => 2, 'g' => 2, 'h' => 2, 'j' => 2, 'k' => 2, 'l' => 2,
    'z' => 3, 'x' => 3, 'c' => 3, 'v' => 3, 'b' => 3, 'n' => 3, 'm' => 3
  }

  answer = []

  words.each do |word|
    downcased_word = word.downcase
    first_row = rows[downcased_word[0]]

    answer.push(word) if downcased_word.chars.all? { |char| rows[char] == first_row }
  end

  answer
end

# 392. Is Subsequence
# Easy
# Topics
# Companies
# Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

# A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

# Example 1:

# Input: s = "abc", t = "ahbgdc"
# Output: true
# Example 2:

# Input: s = "axc", t = "ahbgdc"
# Output: false

# Constraints:

# 0 <= s.length <= 100
# 0 <= t.length <= 104
# s and t consist only of lowercase English letters.

# solution 1 inefficient

def is_subsequence(s, t)
  t.chars do |char|
    t.delete! char unless s.include?(char)
  end
  s == t
end

# solution 2

def is_subsequence(s, t)
  s_index = 0
  t.each_char do |char|
    s_index += 1 if char == s[s_index]
    return true if s_index == s.length
  end
  s_index == s.length
end

# 383. Ransom Note
# Easy
# Topics
# Companies
# Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.

# Each letter in magazine can only be used once in ransomNote.

# Example 1:

# Input: ransomNote = "a", magazine = "b"
# Output: false
# Example 2:

# Input: ransomNote = "aa", magazine = "ab"
# Output: false
# Example 3:

# Input: ransomNote = "aa", magazine = "aab"
# Output: true

# Constraints:

# 1 <= ransomNote.length, magazine.length <= 105
# ransomNote and magazine consist of lowercase English letters.

# solution 1

def can_construct(ransom_note, magazine)
  ransom_note.chars do |letter|
    return false unless magazine.include?(letter)

    magazine.sub!(letter, '')
  end
  true
end

# solution 2

def can_construct(ransom_note, magazine)
  magazine_counts = Hash.new(0)

  # Count frequency of each character in magazine
  magazine.chars.each do |char|
    magazine_counts[char] += 1
  end

  # Check if ransom_note can be constructed
  ransom_note.chars.each do |char|
    return false if magazine_counts[char] == 0

    magazine_counts[char] -= 1
  end

  true
end

# 461. Hamming Distance
# Easy
# Topics
# Companies
# The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

# Given two integers x and y, return the Hamming distance between them.

# Example 1:

# Input: x = 1, y = 4
# Output: 2
# Explanation:
# 1   (0 0 0 1)
# 4   (0 1 0 0)
#        ↑   ↑
# The above arrows point to positions where the corresponding bits are different.
# Example 2:

# Input: x = 3, y = 1
# Output: 1

# Constraints:

# 0 <= x, y <= 231 - 1

# solution 1
def hamming_distance(x, y)
  # Convert both numbers to binary strings
  bin_x = x.to_s(2)
  bin_y = y.to_s(2)

  # Find the lengths of the binary strings
  len_x = bin_x.length
  len_y = bin_y.length

  # Manually pad the shorter string with leading zeros
  if len_x < len_y
    bin_x = '0' * (len_y - len_x) + bin_x
  elsif len_y < len_x
    bin_y = '0' * (len_x - len_y) + bin_y
  end

  # Compare each bit and count the differences
  distance = 0
  (0...[len_x, len_y].max).each do |i|
    distance += 1 if bin_x[i] != bin_y[i]
  end

  distance
end

# Example usage
puts hamming_distance(1, 4) # Output should be 2
puts hamming_distance(3, 1) # Output should be 1

# soltuion 2 using XOR

def hamming_distance(x, y)
  # XOR the two numbers. XOR results in a binary number where each bit is 1
  # if the corresponding bits of x and y are different, and 0 if they are the same.
  xor_result = x ^ y

  # Convert the XOR result to binary and count the number of '1's,
  # which indicates the differing bit positions.
  xor_result.to_s(2).count('1')
end

