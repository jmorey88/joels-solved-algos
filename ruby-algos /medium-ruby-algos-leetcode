# 18. 4Sum
# Medium
# Topics
# Companies
# Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

# 0 <= a, b, c, d < n
# a, b, c, and d are distinct.
# nums[a] + nums[b] + nums[c] + nums[d] == target
# You may return the answer in any order.

# Example 1:

# Input: nums = [1,0,-1,0,-2,2], target = 0
# Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
# Example 2:

# Input: nums = [2,2,2,2,2], target = 8
# Output: [[2,2,2,2]]

# Constraints:

# 1 <= nums.length <= 200
# -109 <= nums[i] <= 109
# -109 <= target <= 109

# solution 1

def four_sum(nums, target)
  answer = []
  combos = nums.combination(4).to_a
  combos.each do |combo|
    combo_sum = 0
    combo.each do |i|
      combo_sum += i
    end
    answer.push(combo) if combo_sum == target && !answer.include?(combo)
  end
  answer
end

# solution 1 refactored

def four_sum(nums, target)
  answer = []
  nums.combination(4).each do |combo|
    answer.push(combo.sort) if combo.sum == target && !answer.include?(combo.sort)
  end
  answer
end

# solution 2

def four_sum(nums, target)
  nums.sort!
  n = nums.size
  answer = []

  (0...n - 3).each do |i|
    next if i > 0 && nums[i] == nums[i - 1]

    (i + 1...n - 2).each do |j|
      next if j > i + 1 && nums[j] == nums[j - 1]

      left = j + 1
      right = n - 1

      while left < right
        sum = nums[i] + nums[j] + nums[left] + nums[right]

        if sum == target
          answer << [nums[i], nums[j], nums[left], nums[right]]
          left += 1
          right -= 1
          left += 1 while left < right && nums[left] == nums[left - 1]
          right -= 1 while left < right && nums[right] == nums[right + 1]
        elsif sum < target
          left += 1
        else
          right -= 1
        end
      end
    end
  end

  answer
end

# 15. 3Sum
# Medium
# Topics
# Companies
# Hint
# Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

# Notice that the solution set must not contain duplicate triplets.

# Example 1:

# Input: nums = [-1,0,1,2,-1,-4]
# Output: [[-1,-1,2],[-1,0,1]]
# Explanation:
# nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
# nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
# nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
# The distinct triplets are [-1,0,1] and [-1,-1,2].
# Notice that the order of the output and the order of the triplets does not matter.
# Example 2:

# Input: nums = [0,1,1]
# Output: []
# Explanation: The only possible triplet does not sum up to 0.
# Example 3:

# Input: nums = [0,0,0]
# Output: [[0,0,0]]
# Explanation: The only possible triplet sums up to 0.

# Constraints:

# 3 <= nums.length <= 3000
# -105 <= nums[i] <= 105

# solution 1

def three_sum(nums)
  answer = []
  nums.combination(3).each do |combo|
    answer.push(combo.sort) if combo.sum == 0 && !answer.include?(combo.sort)
  end
  answer
end

# solution 2

def three_sum(nums)
  nums.sort!
  n = nums.size
  answer = []

  (0...n - 2).each do |i|
    next if i > 0 && nums[i] == nums[i - 1]

    left = i + 1
    right = n - 1

    while left < right
      sum = nums[i] + nums[left] + nums[right]

      if sum == 0
        answer << [nums[i], nums[left], nums[right]]
        left += 1
        right -= 1
        left += 1 while left < right && nums[left] == nums[left - 1]
        right -= 1 while left < right && nums[right] == nums[right + 1]
      elsif sum < 0
        left += 1
      else
        right -= 1
      end
    end
  end

  answer
end

# 16. 3Sum Closest
# Medium
# Topics
# Companies
# Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

# Return the sum of the three integers.

# You may assume that each input would have exactly one solution.

# Example 1:

# Input: nums = [-1,2,1,-4], target = 1
# Output: 2
# Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
# Example 2:

# Input: nums = [0,0,0], target = 1
# Output: 0
# Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).

# Constraints:

# 3 <= nums.length <= 500
# -1000 <= nums[i] <= 1000
# -104 <= target <= 104

# solution 1

def three_sum_closest(nums, target)
  nums.sort!
  n = nums.length
  answer = nums[0] + nums[1] + nums[2]

  (0...n - 2).each do |i|
    left = i + 1
    right = n - 1

    while left < right
      sum = nums[i] + nums[left] + nums[right]

      answer = sum if (target - sum).abs < (target - answer).abs

      if sum == target
        return sum
      elsif sum < target
        left += 1
      else
        right -= 1
      end
    end
  end
  answer
end

# 17. Letter Combinations of a Phone Number
# Medium
# Topics
# Companies
# Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

# A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

# Example 1:

# Input: digits = "23"
# Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
# Example 2:

# Input: digits = ""
# Output: []
# Example 3:

# Input: digits = "2"
# Output: ["a","b","c"]

# Constraints:

# 0 <= digits.length <= 4
# digits[i] is a digit in the range ['2', '9'].

# solution 1

def letter_combinations(digits)
  return [] if digits.empty?

  combos = {
    '2' => 'abc',
    '3' => 'def',
    '4' => 'ghi',
    '5' => 'jkl',
    '6' => 'mno',
    '7' => 'pqrs',
    '8' => 'tuv',
    '9' => 'wxyz'
  }

  answer = []

  def backtrack(combination, next_digits, combos, answer)
    if next_digits.empty?
      answer << combination
    else
      digit = next_digits[0]
      letters = combos[digit]
      letters.each_char do |letter|
        backtrack(combination + letter, next_digits[1..-1], combos, answer)
      end
    end
  end

  backtrack('', digits, combos, answer)
  answer
end

# 22. Generate Parentheses
# Medium
# Topics
# Companies
# Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

# Example 1:

# Input: n = 3
# Output: ["((()))","(()())","(())()","()(())","()()()"]
# Example 2:

# Input: n = 1
# Output: ["()"]

# Constraints:

# 1 <= n <= 8

# solution 1 recursive

def generate_parenthesis(n)
  result = []

  def backtrack(result, current, open_count, close_count, max)
    # Base case: if the current combination is complete
    if current.length == max * 2
      result << current
      return
    end

    # If we can add an open parenthesis, add it and recurse
    backtrack(result, current + '(', open_count + 1, close_count, max) if open_count < max

    # If we can add a close parenthesis, add it and recurse
    return unless close_count < open_count

    backtrack(result, current + ')', open_count, close_count + 1, max)
  end

  # Start the backtracking process with an empty combination
  backtrack(result, '', 0, 0, n)

  result
end

# solution 2 iterative

def generate_parentheses(n)
  result = []
  queue = [['', 0, 0]]

  until queue.empty?
    current, open_count, close_count = queue.shift

    if open_count == n && close_count == n
      result << current
    else
      queue.push([current + '(', open_count + 1, close_count]) if open_count < n

      queue.push([current + ')', open_count, close_count + 1]) if close_count < open_count
    end
  end

  result
end